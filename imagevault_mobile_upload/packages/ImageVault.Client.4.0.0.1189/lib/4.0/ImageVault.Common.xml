<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ImageVault.Common</name>
    </assembly>
    <members>
        <member name="T:ImageVault.Common.Services.ILanguageService">
            <summary>
            Contains methods for working with languages
            </summary>
            <remarks>
            2011-04-08 dan: Created
            </remarks>
        </member>
        <member name="T:ImageVault.Common.Services.IService">
            <summary>
            Summary description for IService.
            </summary>
            <remarks>
            2011-02-02 dan: Created
            </remarks>
        </member>
        <member name="M:ImageVault.Common.Services.ILanguageService.GetAllLanguages">
            <summary>
            Get all registered languages
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IList`1"/> of all registered languages</returns>
        </member>
        <member name="T:ImageVault.Common.Data.VaultAccess">
            <summary>
            Defines the access for a specific identity in a vault
            </summary>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="M:ImageVault.Common.Data.VaultAccess.#ctor">
            <summary>
            Initializes a new instance of the <b>VaultAccess</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.VaultAccess.#ctor(ImageVault.Common.Data.VaultAccess)">
            <summary>
            Initializes a new instance of the <b>VaultAccess</b> class.
            </summary>
            <param name="vaultAccess"></param>
        </member>
        <member name="P:ImageVault.Common.Data.VaultAccess.Identity">
            <summary>
            Get/Sets the Identity of the VaultAccess
            </summary>
            <value>The name of the user/group who has the access</value>
        </member>
        <member name="P:ImageVault.Common.Data.VaultAccess.Role">
            <summary>
            Get/Sets the Role of the VaultAccess
            </summary>
            <value>The <see cref="T:ImageVault.Common.Data.VaultRoles"/> for the identity</value>
        </member>
        <member name="T:ImageVault.Common.Data.Vault">
            <summary>
            Defines a Vault where Media is stored
            </summary>
            <remarks>
            2011-06-22 dan: Created
            </remarks>
        </member>
        <member name="T:ImageVault.Common.Data.IItem`1">
            <summary>
            The IItem interface 
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:ImageVault.Common.Data.IItem`1.Id">
            <summary>
            Get/Sets the Id of the Category
            </summary>
            <value></value>
        </member>
        <member name="M:ImageVault.Common.Data.Vault.#ctor">
            <summary>
            Initializes a new instance of the <b>Vault</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.Vault.#ctor(ImageVault.Common.Data.Vault)">
            <summary>
            Initializes a new instance of the <b>Vault</b> class.
            </summary>
            <param name="vault"></param>
        </member>
        <member name="P:ImageVault.Common.Data.Vault.Id">
            <summary>
            Get/Sets the Id of the Vault
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.Vault.Name">
            <summary>
            Get/Sets the Name of the Vault
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.Vault.Description">
            <summary>
            Get/Sets the Description of the Vault
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.Vault.MetadataDefinitions">
            <summary>
            Get/Sets the MetadataDefinitions of the Vault
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.Vault.AccessList">
            <summary>
            Get/Sets the AccessList of the Vault
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.Vault.CurrentUserRole">
            <summary>
            Get/Sets the CurrentUserRole of the Vault
            </summary>
            <remarks>Only populated if the <see cref="P:ImageVault.Common.Data.Query.VaultPopulationQuery.CurrentUserRole"/> is true</remarks>
            <value>The current user role</value>
        </member>
        <member name="T:ImageVault.Common.Data.User">
            <summary>
            Summary description for User.
            </summary>
            <remarks>
            2011-02-11 dan: Created
            </remarks>
        </member>
        <member name="M:ImageVault.Common.Data.User.#ctor">
            <summary>
            Initializes a new instance of the <b>User</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.User.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <b>User</b> class.
            </summary>
            <param name="username"></param>
        </member>
        <member name="M:ImageVault.Common.Data.User.#ctor(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Initializes a new instance of the <b>User</b> class.
            </summary>
            <param name="username"></param>
            <param name="roles"></param>
        </member>
        <member name="M:ImageVault.Common.Data.User.#ctor(System.Security.Principal.IPrincipal)">
            <summary>
            Initializes a new instance of the <b>User</b> class.
            </summary>
            <param name="principal"></param>
        </member>
        <member name="M:ImageVault.Common.Data.User.#ctor(ImageVault.Common.Data.User)">
            <summary>
            Initializes a new instance of the <b>User</b> class.
            </summary>
            <param name="user"></param>
        </member>
        <member name="M:ImageVault.Common.Data.User.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:ImageVault.Common.Data.User"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:ImageVault.Common.Data.User"/>.</returns>
        </member>
        <member name="P:ImageVault.Common.Data.User.Username">
            <summary>
            Get/Sets the Username of the User
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.User.EmailAddress">
            <summary>
            Get/Sets the EmailAddress of the User
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.User.Roles">
            <summary>
            Get/Sets the Roles of the User
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.User.Identities">
            <summary>
            Gets the Identities of the User
            </summary>
            <value>a <see cref="T:System.Collections.Generic.IList`1"/> containing the users username and all roles</value>
        </member>
        <member name="P:ImageVault.Common.Data.User.Principal">
            <summary>
            Get/Sets the Principal of the User
            </summary>
            <value></value>
        </member>
        <member name="T:ImageVault.Common.Data.Query.MetadataDefinitionFilter">
            <summary>
            The filter for finding <see cref="T:ImageVault.Common.Data.MetadataDefinition"/>.
            </summary>
            <remarks>
            2011-10-18 oskar: Created
            </remarks>
            <example></example>
        </member>
        <member name="T:ImageVault.Common.Data.Query.IVFilter">
            <summary>
            Summary description for IVFilter.
            </summary>
            <remarks>
            2011-10-27 dan: Created
            </remarks>
        </member>
        <member name="T:ImageVault.Common.Data.Query.IIVFilter">
            <summary>
            Summary description for IIVFilter.
            </summary>
            <remarks>
            2011-10-27 dan: Created 
            </remarks>
        </member>
        <member name="P:ImageVault.Common.Data.Query.IIVFilter.Take">
            <summary>
            Get/Sets the Take of the IIVFilter
            </summary>
            <value>Returns a specified number of contiguous elements from the start of a sequence.</value>
        </member>
        <member name="P:ImageVault.Common.Data.Query.IIVFilter.Skip">
            <summary>
            Get/Sets the Skip of the IIVFilter
            </summary>
            <value>Bypasses a specified number of elements in a sequence and then returns the remaining elements.</value>
        </member>
        <member name="M:ImageVault.Common.Data.Query.IVFilter.#ctor">
            <summary>
            Initializes a new instance of the <b>IVFilter</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.Query.IVFilter.#ctor(ImageVault.Common.Data.Query.IVFilter)">
            <summary>
            Initializes a new instance of the <b>IVFilter</b> class.
            </summary>
            <param name="i"></param>
        </member>
        <member name="M:ImageVault.Common.Data.Query.IVFilter.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="P:ImageVault.Common.Data.Query.IVFilter.Skip">
            <summary>
            Get/Sets the Skip of the MediaItemFilter
            </summary>
            <value>Bypasses a specified number of elements in a sequence and then returns the remaining elements.</value>
        </member>
        <member name="P:ImageVault.Common.Data.Query.IVFilter.Take">
            <summary>
            Get/Sets the Take of the MediaItemFilter
            </summary>
            <value>Returns a specified number of contiguous elements from the start of a sequence.</value>
        </member>
        <member name="M:ImageVault.Common.Data.Query.MetadataDefinitionFilter.#ctor">
            <summary>
            Initializes a new instance of the <b>MetadataDefinitionFilter</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.Query.MetadataDefinitionFilter.#ctor(ImageVault.Common.Data.Query.MetadataDefinitionFilter)">
            <summary>
            Initializes a new instance of the <b>MetadataDefinitionFilter</b> class.
            </summary>
            <param name="i"></param>
        </member>
        <member name="M:ImageVault.Common.Data.Query.MetadataDefinitionFilter.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="P:ImageVault.Common.Data.Query.MetadataDefinitionFilter.Id">
            <summary>
            Get/Sets the Id of the MetadataDefinitionFilter
            </summary>
            <value>The id or ids to find metadata definitions for</value>
        </member>
        <member name="P:ImageVault.Common.Data.Query.MetadataDefinitionFilter.MetadataDefinitionType">
            <summary>
            Get/Sets the MetadataDefinitionType of the MetadataDefinitionFilter
            </summary>
            <value>The <see cref="T:ImageVault.Common.Data.MetadataDefinitionTypes"/> to find metadatadefinitions by</value>
        </member>
        <member name="P:ImageVault.Common.Data.Query.MetadataDefinitionFilter.MetadataType">
            <summary>
            Get/Sets the MetadataType of the MetadataDefinitionFilter
            </summary>
            <value>The <see cref="T:ImageVault.Common.Data.MetadataTypes"/> to find metadata definitions by</value>
        </member>
        <member name="T:ImageVault.Common.Data.Query.MediaFormatPopulationQuery">
            <summary>
            Population query for MediaFormats
            </summary>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="P:ImageVault.Common.Data.Query.MediaFormatPopulationQuery.IsInUse">
            <summary>
            Populate information about the conversion format being used by any published files
            </summary>
            <value></value>
        </member>
        <member name="T:ImageVault.Common.Data.ItemExtensions">
            <summary>
            Extension methods for IEnumerable of IItem of T
            </summary>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="M:ImageVault.Common.Data.ItemExtensions.ContainsAny(System.Collections.Generic.IEnumerable{ImageVault.Common.Data.IItem{System.Int32}},System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Returns a value indicating whether the specified <see cref="T:System.Collections.Generic.IEnumerable`1"/>
             is contained in the <see cref="T:ImageVault.Common.Data.ItemExtensions"/>.
            </summary>
            <param name="items">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to locate in the 
            <see cref="T:ImageVault.Common.Data.ItemExtensions"/>.</param>
            <param name="ids"></param>
            <returns><b>true</b> if the <i>IEnumerable&lt;Category&gt;</i> parameter is a member 
            of the <see cref="T:ImageVault.Common.Data.ItemExtensions"/>; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:ImageVault.Common.Data.ItemExtensions.ContainsAny(System.Collections.Generic.IEnumerable{ImageVault.Common.Data.IItem{System.Int32}},System.Int32[])">
            <summary>
            Returns a value indicating whether the specified <see cref="T:System.Collections.Generic.IEnumerable`1"/>
             is contained in the <see cref="T:ImageVault.Common.Data.ItemExtensions"/>.
            </summary>
            <param name="items">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to locate in the 
            <see cref="T:ImageVault.Common.Data.ItemExtensions"/>.</param>
            <param name="ids"></param>
            <returns><b>true</b> if the <i>IEnumerable&lt;Category&gt;</i> parameter is a member 
            of the <see cref="T:ImageVault.Common.Data.ItemExtensions"/>; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:ImageVault.Common.Data.ItemExtensions.Contains(System.Collections.Generic.IEnumerable{ImageVault.Common.Data.IItem{System.Int32}},System.Int32)">
            <summary>
            Returns a value indicating whether the specified <see cref="T:System.Collections.Generic.IEnumerable`1"/>
             is contained in the <see cref="T:ImageVault.Common.Data.ItemExtensions"/>.
            </summary>
            <param name="items">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to locate in the 
            <see cref="T:ImageVault.Common.Data.ItemExtensions"/>.</param>
            <param name="id"></param>
            <returns><b>true</b> if the <i>IEnumerable&lt;Category&gt;</i> parameter is a member 
            of the <see cref="T:ImageVault.Common.Data.ItemExtensions"/>; otherwise, <b>false</b>.</returns>
        </member>
        <member name="T:ImageVault.Common.Data.WebMediaFormat">
            <summary>
            A WebMediaFormat will keep the source format (image, audio, video) if possible but allow resize operations
            </summary>
            <remarks>
            <para>2011-12-01 dan: Created</para>
            </remarks>
        </member>
        <member name="T:ImageVault.Common.Data.TransformableFormat">
            <summary>
            Defines a format that can have effects
            </summary>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="T:ImageVault.Common.Data.MediaFormatBase">
            <summary>
            Defines the base class for a conversion format
            </summary>
            <remarks>
            2011-06-25 dan: Created
            </remarks>
        </member>
        <member name="T:ImageVault.Common.Data.IMediaFormat">
            <summary>
            Summary description for IMediaFormat.
            </summary>
            <remarks>
            2011-07-15 dan: Created 
            </remarks>
        </member>
        <member name="P:ImageVault.Common.Data.IMediaFormat.Name">
            <summary>
            Defines the name of the format
            </summary>
            <value></value>
        </member>
        <member name="M:ImageVault.Common.Data.MediaFormatBase.#ctor">
            <summary>
            Initializes a new instance of the <b>MediaFormatBase</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.MediaFormatBase.#ctor(ImageVault.Common.Data.MediaFormatBase)">
            <summary>
            Initializes a new instance of the <b>MediaFormatBase</b> class.
            </summary>
            <param name="mediaFormatBase"></param>
        </member>
        <member name="M:ImageVault.Common.Data.MediaFormatBase.CopyFrom(ImageVault.Common.Data.MediaFormatBase)">
            <summary>
            Copies the values from the supplied format to the current instance
            </summary>
            <param name="format">The <see cref="T:ImageVault.Common.Data.MediaFormatBase"/> to copy from.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="format"/> is null.</exception>
        </member>
        <member name="M:ImageVault.Common.Data.MediaFormatBase.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:ImageVault.Common.Data.MediaFormatBase.System#ICloneable#Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:ImageVault.Common.Data.MediaFormatBase.Equals(ImageVault.Common.Data.MediaFormatBase)">
            <summary>
            Determines whether the specified <see cref="T:ImageVault.Common.Data.MediaFormatBase"/> is equal to the current 
            <b>MediaFormatBase</b>.
            </summary>
            <param name="other">The <see cref="T:ImageVault.Common.Data.MediaFormatBase"/> to compare with the current <see cref="T:ImageVault.Common.Data.MediaFormatBase"/>.</param>
            <returns>true if the specified <see cref="T:ImageVault.Common.Data.MediaFormatBase"/> is equal to the current <b>MediaFormatBase</b>;
            otherwise, false.</returns>
        </member>
        <member name="M:ImageVault.Common.Data.MediaFormatBase.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:ImageVault.Common.Data.MediaFormatBase.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:ImageVault.Common.Data.MediaFormatBase.Id">
            <summary>
            Get/Sets the Id of the MediaFormatBase
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.MediaFormatBase.Name">
            <summary>
            Get/Sets the Name of the MediaFormatBase
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.MediaFormatBase.MediaFormatOutputType">
            <summary>
            Get/Sets the MediaFormatOutputType of the MediaFormatBase
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.MediaFormatBase.SystemFormat">
            <summary>
            Get/Sets the SystemFormat of the MediaFormatBase
            </summary>
            <value>True if the format is a system format, false if it is a user defined format</value>
        </member>
        <member name="P:ImageVault.Common.Data.MediaFormatBase.IsInUse">
            <summary>
            If the conversion format is used by any published files
            this property is not popualted by default
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.MediaFormatBase.IsEmpty">
            <summary>
            Checks if the Format is an empty format
            </summary>
            <value></value>
        </member>
        <member name="M:ImageVault.Common.Data.TransformableFormat.CopyFrom(ImageVault.Common.Data.TransformableFormat)">
            <summary>
            
            </summary>
            <param name="format"></param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="format"/> is null.</exception>
        </member>
        <member name="M:ImageVault.Common.Data.TransformableFormat.Equals(ImageVault.Common.Data.TransformableFormat)">
            <summary>
            Determines whether the specified <see cref="T:ImageVault.Common.Data.TransformableFormat"/> is equal to the current 
            <b>TransformableFormat</b>.
            </summary>
            <param name="other">The <see cref="T:ImageVault.Common.Data.TransformableFormat"/> to compare with the current <see cref="T:ImageVault.Common.Data.TransformableFormat"/>.</param>
            <returns>true if the specified <see cref="T:ImageVault.Common.Data.TransformableFormat"/> is equal to the current <b>TransformableFormat</b>;
            otherwise, false.</returns>
        </member>
        <member name="M:ImageVault.Common.Data.TransformableFormat.EffectsEquals(System.Collections.Generic.List{ImageVault.Common.Data.Effects.Effect},System.Collections.Generic.List{ImageVault.Common.Data.Effects.Effect})">
            <summary>
            Determines whether the specified <see cref="T:System.Collections.Generic.List`1"/> instances are considered equal.
            </summary>
            <param name="l1">The first <see cref="T:System.Collections.Generic.List`1"/> to compare.</param>
            <param name="l2">The second <see cref="T:System.Collections.Generic.List`1"/> to compare.</param>
            <returns>true if <i>l1</i> is the same instance as <i>l2</i> 
            or  if both are null references or if <c>l1.Equals(l2)</c> returns true; otherwise, false.</returns>
        </member>
        <member name="M:ImageVault.Common.Data.TransformableFormat.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:ImageVault.Common.Data.TransformableFormat.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:ImageVault.Common.Data.TransformableFormat.Effects">
            <summary>
            Get/Sets the Effects of the TransformableFormat
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.TransformableFormat.IsEmpty">
            <summary>
            Gets the IsEmpty of the TransformableFormat
            </summary>
            <value></value>
        </member>
        <member name="T:ImageVault.Common.Data.IResizeFormat">
            <summary>
            Defines a conversion format that can performe resize of media
            </summary>
        </member>
        <member name="P:ImageVault.Common.Data.IResizeFormat.KeepAspectRatio">
            <summary>
            Get/Sets the KeepAspectRatio of the IResizeFormat
            </summary>
            <value>True if the original aspect ratio should be kept when resizing</value>
        </member>
        <member name="P:ImageVault.Common.Data.IResizeFormat.Width">
            <summary>
            Get/Sets the Width of the IResizeFormat
            </summary>
            <value>If specified, defines the maximum width of the conversion</value>
        </member>
        <member name="P:ImageVault.Common.Data.IResizeFormat.Height">
            <summary>
            Get/Sets the Height of the IResizeFormat
            </summary>
            <value>If defined, specifies the maximum height of the conversion</value>
        </member>
        <member name="P:ImageVault.Common.Data.IResizeFormat.AspectRatio">
            <summary>
            Get/Sets the AspectRatio of the IResizeFormat
            </summary>
            <value>if larger than 0, defines the target aspect ratio of the image</value>
        </member>
        <member name="M:ImageVault.Common.Data.WebMediaFormat.#ctor">
            <summary>
            Initializes a new instance of the <b>WebMediaFormat</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.WebMediaFormat.#ctor(ImageVault.Common.Data.WebMediaFormat)">
            <summary>
            Initializes a new instance of the <b>WebMediaFormat</b> class.
            </summary>
            <param name="format"></param>
        </member>
        <member name="M:ImageVault.Common.Data.WebMediaFormat.CopyFrom(ImageVault.Common.Data.WebMediaFormat)">
            <summary>
            Copies the information from the supplied format to the current instance
            </summary>
            <param name="format">The <see cref="T:ImageVault.Common.Data.WebMediaFormat"/> to copy from</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="format"/> is null.</exception>
        </member>
        <member name="M:ImageVault.Common.Data.WebMediaFormat.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:ImageVault.Common.Data.WebMediaFormat.Equals(ImageVault.Common.Data.WebMediaFormat)">
            <summary>
            Determines whether the specified <see cref="T:ImageVault.Common.Data.WebMediaFormat"/> is equal to the current 
            <b>WebMediaFormat</b>.
            </summary>
            <param name="other">The <see cref="T:ImageVault.Common.Data.WebMediaFormat"/> to compare with the current <see cref="T:ImageVault.Common.Data.WebMediaFormat"/>.</param>
            <returns>true if the specified <see cref="T:ImageVault.Common.Data.WebMediaFormat"/> is equal to the current <b>WebMediaFormat</b>;
            otherwise, false.</returns>
        </member>
        <member name="M:ImageVault.Common.Data.WebMediaFormat.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:ImageVault.Common.Data.WebMediaFormat.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:ImageVault.Common.Data.WebMediaFormat.Width">
            <summary>
            Get/Sets the Width of the MediaConversion
            </summary>
            <value>Defines the maximum width of the image</value>
        </member>
        <member name="P:ImageVault.Common.Data.WebMediaFormat.Height">
            <summary>
            Get/Sets the Height of the MediaConversion
            </summary>
            <value>Defines the maximum height of the image</value>
        </member>
        <member name="P:ImageVault.Common.Data.WebMediaFormat.KeepAspectRatio">
            <summary>
            Get/Sets the KeepAspectRatio of the MediaConversion
            </summary>
            <value>Will keep the original aspect ratio of the image if set to true. If false the image will be the aspect ratio of the target size. Default value is true</value>
            <remarks>If the <see cref="P:ImageVault.Common.Data.WebMediaFormat.AspectRatio"/> is set to anything else than zero, this value has no function since the aspect ratio is already set.</remarks>
        </member>
        <member name="P:ImageVault.Common.Data.WebMediaFormat.AspectRatio">
            <summary>
            Get/Sets the AspectRatio of the MediaConversion
            </summary>
            <value>Defines the aspect ratio of the image. If set the original image will automatically cropped to a size that matches the given aspect ratio 
            (unless the original image already matches the given aspect ratio). Default value is zero. Zero disables the crop function, negative values are illegal.</value>
        </member>
        <member name="P:ImageVault.Common.Data.WebMediaFormat.IsEmpty">
            <summary>
            Checks if this is an empty format or not
            </summary>
            <value></value>
        </member>
        <member name="T:ImageVault.Common.Data.Effects.ResizeEffect">
            <summary>
            Resize effect
            </summary>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="T:ImageVault.Common.Data.Effects.Effect">
            <summary>
            Effects base class
            </summary>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="M:ImageVault.Common.Data.Effects.Effect.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:ImageVault.Common.Data.Effects.ResizeEffect.#ctor">
            <summary>
            Initializes a new instance of the <b>ResizeEffect</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.Effects.ResizeEffect.#ctor(System.Int32,System.Int32,ImageVault.Common.Data.ResizeMode)">
            <summary>
            Initializes a new instance of the <b>ResizeEffect</b> class.
            </summary>
            <param name="width">The width of the resizeEffect.</param>
            <param name="height">The height of the resizeEffect.</param>
            <param name="resizeMode">The <see cref="T:ImageVault.Common.Data.ResizeMode"/>. Default is <see cref="F:ImageVault.Common.Data.ResizeMode.ScaleToFit"/>.</param>
        </member>
        <member name="M:ImageVault.Common.Data.Effects.ResizeEffect.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:ImageVault.Common.Data.Effects.ResizeEffect.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current 
            <b>ResizeEffect</b>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:ImageVault.Common.Data.Effects.ResizeEffect"/>.</param>
            <returns>true if the specified <see cref="T:System.Object"/> is equal to the current <b>ResizeEffect</b>;
            otherwise, false.</returns>
        </member>
        <member name="M:ImageVault.Common.Data.Effects.ResizeEffect.GetHashCode">
            <summary>
            Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>A hash code for the current <see cref="T:ImageVault.Common.Data.Effects.ResizeEffect"/>.</returns>
        </member>
        <member name="M:ImageVault.Common.Data.Effects.ResizeEffect.Equals(ImageVault.Common.Data.Effects.ResizeEffect)">
            <summary>
            Determines whether the specified <see cref="T:ImageVault.Common.Data.Effects.ResizeEffect"/> is equal to the current 
            <b>ResizeEffect</b>.
            </summary>
            <param name="other">The <see cref="T:ImageVault.Common.Data.Effects.ResizeEffect"/> to compare with the current <see cref="T:ImageVault.Common.Data.Effects.ResizeEffect"/>.</param>
            <returns>true if the specified <see cref="T:ImageVault.Common.Data.Effects.ResizeEffect"/> is equal to the current <b>ResizeEffect</b>;
            otherwise, false.</returns>
        </member>
        <member name="P:ImageVault.Common.Data.Effects.ResizeEffect.Width">
            <summary>
            Get/Sets the Width of the ResizeEffect
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.Effects.ResizeEffect.Height">
            <summary>
            Get/Sets the Height of the ResizeEffect
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.Effects.ResizeEffect.ResizeMode">
            <summary>
            Get/Sets the ResizeMode of the ResizeEffect
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.Effects.ResizeEffect.AspectRatio">
            <summary>
            Gets the AspectRatio of the ResizeEffect
            </summary>
            <value></value>
        </member>
        <member name="T:ImageVault.Common.Services.IDemoService">
            <summary>
            Summary description for IDemoService.
            </summary>
            <remarks>
            2011-04-15 dan: Created
            </remarks>
        </member>
        <member name="M:ImageVault.Common.Services.IDemoService.SetupDemoContent">
            <summary>
            
            </summary>
        </member>
        <member name="M:ImageVault.Common.Services.IDemoService.ClearCache">
            <summary>
            
            </summary>
        </member>
        <member name="T:ImageVault.Common.Data.VaultRoles">
            <summary>
            Defines all vault roles in the system
            </summary>
            <remarks>
            2011-02-07 dan: Created
            </remarks>
        </member>
        <member name="F:ImageVault.Common.Data.VaultRoles.FullControl">
            <summary>
            User can perform all actions on a vault 
            Includes the Contribute role
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.VaultRoles.Contribute">
            <summary>
            User can contribute to the vault, upload, delete, modify metadata
            Includes the view role
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.VaultRoles.View">
            <summary>
            User has read access to the vault, can view images and metadata
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.VaultRoles.None">
            <summary>
            User has no access to the vault
            </summary>
        </member>
        <member name="T:ImageVault.Common.Data.VaultMetadataDefinition">
            <summary>
            Defines the VaultMetadataDefinition 
            </summary>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="M:ImageVault.Common.Data.VaultMetadataDefinition.#ctor">
            <summary>
            Initializes a new instance of the <b>VaultMetadataDefinition</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.VaultMetadataDefinition.#ctor(ImageVault.Common.Data.VaultMetadataDefinition)">
            <summary>
            Initializes a new instance of the <b>VaultMetadataDefinition</b> class.
            </summary>
            <param name="vaultMetadataDefinition"></param>
        </member>
        <member name="P:ImageVault.Common.Data.VaultMetadataDefinition.MetadataDefinition">
            <summary>
            Get/Sets the MetadataDefinition of the VaultMetadataDefinition
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.VaultMetadataDefinition.IsMandatory">
            <summary>
            Get/Sets the IsMandatory of the VaultMetadataDefinition
            </summary>
            <value>True if this metadata is mandatory in the vault</value>
        </member>
        <member name="T:ImageVault.Common.Data.Query.MediaFormatQuery">
            <summary>
            Query for selecting media conversion formats
            </summary>
        </member>
        <member name="T:ImageVault.Common.Data.Query.IVQuery`1">
            <summary>
            Defines a base query object
            </summary>
            <remarks>
            2011-11-07 dan: Created
            </remarks>
        </member>
        <member name="T:ImageVault.Common.Data.Query.IIVQuery`1">
            <summary>
            Summary description for IIVQuery.
            </summary>
            <remarks>
            2011-10-27 dan: Created 
            </remarks>
            
        </member>
        <member name="P:ImageVault.Common.Data.Query.IIVQuery`1.Filter">
            <summary>
            Gets the Filter of the IIVQuery
            </summary>
            <value></value>
        </member>
        <member name="M:ImageVault.Common.Data.Query.IVQuery`1.#ctor">
            <summary>
            Initializes a new instance of the <b>IVQuery&lt;TFilter&gt;</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.Query.IVQuery`1.#ctor(ImageVault.Common.Data.Query.IVQuery{`0})">
            <summary>
            Initializes a new instance of the <b>IVQuery&lt;TFilter&gt;</b> class.
            </summary>
            <param name="query"></param>
        </member>
        <member name="P:ImageVault.Common.Data.Query.IVQuery`1.Filter">
            <summary>
            Gets the Filter of the Query
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.Query.MediaFormatQuery.Populate">
            <summary>
            Get/Sets the Populate of the MediaFormatQuery
            </summary>
            <value></value>
        </member>
        <member name="T:ImageVault.Common.Data.Effects.CropEffect">
            <summary>
            Crop effect
            </summary>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="M:ImageVault.Common.Data.Effects.CropEffect.#ctor">
            <summary>
            Initializes a new instance of the <b>CropEffect</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.Effects.CropEffect.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <b>CropEffect</b> class.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:ImageVault.Common.Data.Effects.CropEffect.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:ImageVault.Common.Data.Effects.CropEffect.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current 
            <b>CropEffect</b>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:ImageVault.Common.Data.Effects.CropEffect"/>.</param>
            <returns>true if the specified <see cref="T:System.Object"/> is equal to the current <b>CropEffect</b>;
            otherwise, false.</returns>
        </member>
        <member name="M:ImageVault.Common.Data.Effects.CropEffect.GetHashCode">
            <summary>
            Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>A hash code for the current <see cref="T:ImageVault.Common.Data.Effects.CropEffect"/>.</returns>
        </member>
        <member name="M:ImageVault.Common.Data.Effects.CropEffect.Equals(ImageVault.Common.Data.Effects.CropEffect)">
            <summary>
            Determines whether the specified <see cref="T:ImageVault.Common.Data.Effects.CropEffect"/> is equal to the current 
            <b>CropEffect</b>.
            </summary>
            <param name="other">The <see cref="T:ImageVault.Common.Data.Effects.CropEffect"/> to compare with the current <see cref="T:ImageVault.Common.Data.Effects.CropEffect"/>.</param>
            <returns>true if the specified <see cref="T:ImageVault.Common.Data.Effects.CropEffect"/> is equal to the current <b>CropEffect</b>;
            otherwise, false.</returns>
        </member>
        <member name="P:ImageVault.Common.Data.Effects.CropEffect.X">
            <summary>
            Get/Sets the X of the CropEffect
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.Effects.CropEffect.Y">
            <summary>
            Get/Sets the Y of the CropEffect
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.Effects.CropEffect.Width">
            <summary>
            Get/Sets the width of the CropEffect
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.Effects.CropEffect.Height">
            <summary>
            Get/Sets the height of the CropEffect
            </summary>
            <value></value>
        </member>
        <member name="T:ImageVault.Common.Data.ClaimsUser">
            <summary>
            A user authenticated by Claims
            </summary>
            <remarks>
            2011-02-11 dan: Created
            </remarks>
        </member>
        <member name="M:ImageVault.Common.Data.ClaimsUser.#ctor(Microsoft.IdentityModel.Claims.IClaimsIdentity)">
            <summary>
            Initializes a new instance of the <b>ClaimsUser</b> class.
            </summary>
            <param name="claimsIdentity"></param>
        </member>
        <member name="P:ImageVault.Common.Data.ClaimsUser.Roles">
            <summary>
            Get/Sets the Roles of the ClaimsUser
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.ClaimsUser.EmailAddress">
            <summary>
            Get/Sets the EmailAddress of the ClaimsUser
            </summary>
            <value></value>
        </member>
        <member name="T:ImageVault.Common.Data.MediaItemSortOrders">
            <summary>
            Defines the sortorder for a list of media items
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MediaItemSortOrders.None">
            <summary>
            items are not sorted
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MediaItemSortOrders.Name">
            <summary>
            Sorts by name in an ascending order
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MediaItemSortOrders.NameDecending">
            <summary>
            Sorts by name in a descending order
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MediaItemSortOrders.DateAdded">
            <summary>
            Sorts by date added in an ascending order
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MediaItemSortOrders.DateAddedDecending">
            <summary>
            Sorts by date added in a descending order
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MediaItemSortOrders.MediaItemId">
            <summary>
            Sorts by the MediaItemId field in an ascending order
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MediaItemSortOrders.MediaItemIdDescending">
            <summary>
            Sorts by the MediaItemId field in a Descending order
            </summary>
        </member>
        <member name="T:ImageVault.Common.Data.MetadataDefinitionMapping">
            <summary>
            Defines the mapping for a metadata definition
            </summary>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="M:ImageVault.Common.Data.MetadataDefinitionMapping.#ctor">
            <summary>
            Initializes a new instance of the <b>MetadataDefinitionMapping</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.MetadataDefinitionMapping.#ctor(ImageVault.Common.Data.MetadataDefinitionMapping)">
            <summary>
            Initializes a new instance of the <b>MetadataDefinitionMapping</b> class.
            </summary>
            <param name="metadataDefinitionMapping"></param>
        </member>
        <member name="P:ImageVault.Common.Data.MetadataDefinitionMapping.Priority">
            <summary>
            Get/Sets the Priority of the DbMetadataDefinitionMapping
            </summary>
            <value>The priority order of the mapping. Lower values goes first.</value>
        </member>
        <member name="P:ImageVault.Common.Data.MetadataDefinitionMapping.MetadataDefinition">
            <summary>
            Get/Sets the MetadataDefinition of the <see cref="T:ImageVault.Common.Data.MetadataDefinitionMapping"/>
            </summary>
            <value>The mapped <see cref="P:ImageVault.Common.Data.MetadataDefinitionMapping.MetadataDefinition"/> </value>
        </member>
        <member name="T:ImageVault.Common.Data.Language">
            <summary>
            Defines a language
            </summary>
            <remarks>
            2011-06-25 dan: Created
            </remarks>
        </member>
        <member name="M:ImageVault.Common.Data.Language.#ctor">
            <summary>
            Initializes a new instance of the <b>Language</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.Language.#ctor(ImageVault.Common.Data.Language)">
            <summary>
            Initializes a new instance of the <b>Language</b> class.
            </summary>
            <param name="language"></param>
        </member>
        <member name="P:ImageVault.Common.Data.Language.LanguageCode">
            <summary>
            Get/Sets the LanguageCode of the Language
            </summary>
            <value>The language code for the language in the IETF format http://en.wikipedia.org/wiki/IETF_language_tag </value>
        </member>
        <member name="P:ImageVault.Common.Data.Language.Id">
            <summary>
            Get/Sets the Id of the Language
            </summary>
            <value>The internal id of the language used by ImageVault</value>
        </member>
        <member name="T:ImageVault.Common.Data.Query.VaultQuery">
            <summary>
            Summary description for VaultQuery.
            </summary>
            <remarks>
            2011-09-22 oskar: Created
            </remarks>
        </member>
        <member name="P:ImageVault.Common.Data.Query.VaultQuery.Populate">
            <summary>
            Get/Sets the Populate of the VaultQuery
            </summary>
            <value>Defines the populate information for the vault</value>
        </member>
        <member name="T:ImageVault.Common.Data.Query.VaultPopulationQuery">
            <summary>
            The population data for the FindVault query
            </summary>
        </member>
        <member name="P:ImageVault.Common.Data.Query.VaultPopulationQuery.AccessList">
            <summary>
            Get/Sets the AccessList of the VaultPopulationQuery
            </summary>
            <value>True if the <see cref="P:ImageVault.Common.Data.Vault.AccessList"/> should be populated</value>
        </member>
        <member name="P:ImageVault.Common.Data.Query.VaultPopulationQuery.MetadataDefinitions">
            <summary>
            Get/Sets the MetadataDefinitions of the VaultPopulationQuery
            </summary>
            <value>True if the <see cref="P:ImageVault.Common.Data.Vault.MetadataDefinitions"/> should be populated, false otherwise</value>
        </member>
        <member name="P:ImageVault.Common.Data.Query.VaultPopulationQuery.CurrentUserRole">
            <summary>
            Get/Sets the CurrentUserRole of the VaultPopulationQuery
            </summary>
            <value>True if the <see cref="P:ImageVault.Common.Data.Vault.CurrentUserRole"/> should be populated.</value>
        </member>
        <member name="T:ImageVault.Common.Lib.Wcf.EndPointType">
            <summary>
            Defines different types of endpoints
            </summary>
        </member>
        <member name="F:ImageVault.Common.Lib.Wcf.EndPointType.Streamed">
            <summary>
            Streamed
            </summary>
        </member>
        <member name="F:ImageVault.Common.Lib.Wcf.EndPointType.Rest">
            <summary>
            Rest
            </summary>
        </member>
        <member name="F:ImageVault.Common.Lib.Wcf.EndPointType.Wcf">
            <summary>
            Wcf
            </summary>
        </member>
        <member name="T:ImageVault.Common.Data.MetadataInteger">
            <summary>
            Summary description for MetadataInteger.
            </summary>
            <remarks>
            2011-04-14 dan: Created
            </remarks>
            <example></example>
        </member>
        <member name="T:ImageVault.Common.Data.Metadata">
            <summary>
            Defines a metadata that consistst of one or several metadata values of the same definition.
            </summary>
            <remarks>
            2011-04-14 dan: Created
            </remarks>
        </member>
        <member name="M:ImageVault.Common.Data.Metadata.#ctor(ImageVault.Common.Data.MetadataDefinition,System.Nullable{System.Int32},System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <b>Metadata</b> class.
            </summary>
            <param name="definition"></param>
            <param name="languageId"></param>
            <param name="isMandantory"></param>
            <param name="isTitle"></param>
            <param name="isAltText"></param>
            <param name="isDefinedInVault"></param>
        </member>
        <member name="M:ImageVault.Common.Data.Metadata.#ctor">
            <summary>
            Initializes a new instance of the <b>Metadata</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.Metadata.#ctor(ImageVault.Common.Data.Metadata)">
            <summary>
            Initializes a new instance of the <b>Metadata</b> class.
            </summary>
            <param name="metadata"></param>
        </member>
        <member name="M:ImageVault.Common.Data.Metadata.CreateInstance(ImageVault.Common.Data.MetadataDefinition,System.Nullable{System.Int32},System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates an instance of a metadata that matches the supplied definition
            </summary>
            <param name="definition">The <see cref="T:ImageVault.Common.Data.MetadataDefinition"/> to use as a base for creating the <see cref="T:ImageVault.Common.Data.Metadata"/></param>
            <param name="languageId">The id of the language to use for creating the metadata</param>
            <param name="isMandantory">If the metadata is mandantory or not</param>
            <param name="isTitle"></param>
            <param name="isAltText"></param>
            <param name="isDefinedInVault"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="definition"/> is null.</exception>
            <exception cref="T:System.NotImplementedException">If not implemented Metadata for type .</exception>
        </member>
        <member name="M:ImageVault.Common.Data.Metadata.Parse(System.String)">
            <summary>
            Parses the supplied value and assigns it to the metadata
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:ImageVault.Common.Data.Metadata.Name">
            <summary>
            Get/Sets the Name of the Metadata
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.Metadata.DefinitionType">
            <summary>
            Get/Sets the DefinitionType of the Metadata
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.Metadata.LanguageId">
            <summary>
            Get/Sets the LanguageId of the Metadata
            </summary>
            <value>The id of the language of the metadata</value>
        </member>
        <member name="P:ImageVault.Common.Data.Metadata.IsMandantory">
            <summary>
            Get/Sets the IsMandantory of the Metadata
            </summary>
            <value>If true the metadata is mandantory in at least one vault that it is part of</value>
        </member>
        <member name="P:ImageVault.Common.Data.Metadata.IsTitle">
            <summary>
            Get/Sets the IsDefaultTitle of the Metadata
            </summary>
            <value>If true this is default title in the vault</value>
        </member>
        <member name="P:ImageVault.Common.Data.Metadata.IsAltText">
            <summary>
            Get/Sets the IsDefaultAltText of the Metadata
            </summary>
            <value>If true this is the default alt text in the vault</value>
        </member>
        <member name="P:ImageVault.Common.Data.Metadata.InnerValue">
            <summary>
            Get/Sets the InnerValue of the Metadata
            </summary>
            <value>The value for all metadata objects. If <see cref="P:ImageVault.Common.Data.Metadata.IsCoherent"/> is false this only contains the value of the first item</value>
        </member>
        <member name="P:ImageVault.Common.Data.Metadata.Value">
            <summary>
            Get/Sets the Value of the Metadata
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.Metadata.IsCoherent">
            <summary>
            Get/Sets the IsCoherent of the Metadata
            </summary>
            <value>If true all metadata that was used to create the condensed value has the same value</value>
        </member>
        <member name="P:ImageVault.Common.Data.Metadata.MetadataDefinitionId">
            <summary>
            Get/Sets the MetadataDefinitionId of the Metadata
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.Metadata.IsNull">
            <summary>
            Get/Sets the IsNull of the Metadata
            </summary>
            <value>If true the value is not set, false if it is set to a non null value</value>
        </member>
        <member name="P:ImageVault.Common.Data.Metadata.IsReadOnly">
            <summary>
            If user can change metadata
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.Metadata.IsMultilingual">
            <summary>
            If the matadata can existis for multiple languages
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.Metadata.IsDefinedInVault">
            <summary>
            Get/Sets the IsDefinedInVault of the Metadata
            </summary>
            <value>True if this metadata is defined in the vault that the item resides in.</value>
        </member>
        <member name="M:ImageVault.Common.Data.MetadataInteger.#ctor">
            <summary>
            Initializes a new instance of the <b>MetadataInteger</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.MetadataInteger.#ctor(ImageVault.Common.Data.MetadataInteger)">
            <summary>
            Initializes a new instance of the <b>MetadataInteger</b> class.
            </summary>
            <param name="metadataInteger"></param>
        </member>
        <member name="M:ImageVault.Common.Data.MetadataInteger.#ctor(ImageVault.Common.Data.MetadataDefinition,System.Nullable{System.Int32},System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <b>MetadataInteger</b> class.
            </summary>
            <param name="definition"></param>
            <param name="languageId"></param>
            <param name="isMandantory"></param>
            <param name="isTitle"></param>
            <param name="isAltText"></param>
            <param name="isDefinedInVault"></param>
        </member>
        <member name="M:ImageVault.Common.Data.MetadataInteger.Parse(System.String)">
            <summary>
            Parses the string to a MetadataInteger
            </summary>
            <param name="value"></param>
            <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">If the value is not a valid int.</exception>
        </member>
        <member name="P:ImageVault.Common.Data.MetadataInteger.IntegerValue">
            <summary>
            Get/Sets the IntegerValue of the MetadataInteger
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.MetadataInteger.InnerValue">
            <summary>
            Get/Sets the InnerValue of the DbMetadataString
            </summary>
            <value></value>
        </member>
        <member name="T:ImageVault.Common.Data.MetadataDefinition">
            <summary>
            Defines a metadata definition
            </summary>
            <remarks>
            <para>2011-08-20 dan: Created</para>
            </remarks>
        </member>
        <member name="M:ImageVault.Common.Data.MetadataDefinition.#ctor">
            <summary>
            Initializes a new instance of the <b>MetadataDefinition</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.MetadataDefinition.#ctor(ImageVault.Common.Data.MetadataDefinition)">
            <summary>
            Initializes a new instance of the <b>MetadataDefinition</b> class.
            </summary>
            <param name="metadataDefinition">The <see cref="T:ImageVault.Common.Data.MetadataDefinition"/> to copy the values from</param>
        </member>
        <member name="P:ImageVault.Common.Data.MetadataDefinition.Id">
            <summary>
            Get/Sets the Id of the MetadataDefinition
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.MetadataDefinition.Name">
            <summary>
            Get/Sets the Name of the MetadataDefinition
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.MetadataDefinition.MetadataType">
            <summary>
            Get/Sets the MetadataType of the MetadataDefinition
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.MetadataDefinition.MetadataDefinitionType">
            <summary>
            Get/Sets the MetadataDefinitionType of the MetadataDefinition
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.MetadataDefinition.Description">
            <summary>
            Get/Sets the Description of the MetadataDefinition
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.MetadataDefinition.IsReadOnly">
            <summary>
            Get/Sets the IsReadOnly of the MetadataDefinition
            </summary>
            <value>If true, the value of the metadata cannot be changed</value>
        </member>
        <member name="P:ImageVault.Common.Data.MetadataDefinition.IsMultilingual">
            <summary>
            Get/Sets the IsMultilingual of the MetadataDefinition
            </summary>
            <value>If true, the value can be translated to other languages</value>
        </member>
        <member name="P:ImageVault.Common.Data.MetadataDefinition.SourceMetadataDefinitions">
            <summary>
            Get/Sets the SourceMetadataDefinitions of the <see cref="T:ImageVault.Common.Data.MetadataDefinition"/>
            </summary>
            <value>Defines the list of metadatadefinitions that will be mapped to this metadata definition</value>
        </member>
        <member name="T:ImageVault.Common.Data.MediaServiceSaveOptions">
            <summary>
            Defines the different Media service save options
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MediaServiceSaveOptions.Metadata">
            <summary>
            Saves the Metadata in the object
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MediaServiceSaveOptions.Categories">
            <summary>
            Saves the Categories assigned to the mediaitem
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MediaServiceSaveOptions.MarkAsOrganized">
            <summary>
            Marks the item as organized
            </summary>
        </member>
        <member name="T:ImageVault.Common.Data.Query.CategoryQuery">
            <summary>
            Query used to gat categories
            </summary>
        </member>
        <member name="P:ImageVault.Common.Data.Query.CategoryQuery.Populate">
            <summary>
            Get/Sets the Populate of the for CategoryQuery
            </summary>
        </member>
        <member name="T:ImageVault.Common.Data.Query.CategoryFilter">
            <summary>
            Filter for filtering categories
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.Query.CategoryFilter.Id">
            <summary>
            Which id to retrive
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.Query.CategoryFilter.ParentId">
            <summary>
            Will retrive all child categorys of the parent id
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.Query.CategoryFilter.#ctor">
            <summary>
            Initializes a new instance of the <b>CategoryFilter</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.Query.CategoryFilter.#ctor(ImageVault.Common.Data.Query.CategoryFilter)">
            <summary>
            Initializes a new instance of the <b>CategoryFilter</b> class.
            </summary>
            <param name="i"></param>
        </member>
        <member name="M:ImageVault.Common.Data.Query.CategoryFilter.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="T:ImageVault.Common.Data.Query.CategoryPopulationQuery">
            <summary>
            Populate query for populating category fields 
            </summary>
        </member>
        <member name="P:ImageVault.Common.Data.Query.CategoryPopulationQuery.IsUsed">
            <summary>
            Populate information about if the category is used by any image
            </summary>
        </member>
        <member name="T:ImageVault.Common.Data.Video">
            <summary>
            Summary description for Video.
            </summary>
            <remarks>
            2012-05-31 dan: Created
            </remarks>
        </member>
        <member name="T:ImageVault.Common.Data.WebMedia">
            <summary>
            Summary description for WebMedia.
            </summary>
            <remarks>
            <para>2011-12-01 dan: Created</para>
            </remarks>
        </member>
        <member name="T:ImageVault.Common.Data.Media">
            <summary>
            Defines information about a specific media item for a specific conversion
            </summary>
            <remarks>
            2011-04-26 dan: Created
            </remarks>
        </member>
        <member name="M:ImageVault.Common.Data.Media.#ctor">
            <summary>
            Initializes a new instance of the <b>Media</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.Media.#ctor(ImageVault.Common.Data.Media)">
            <summary>
            Initializes a new instance of the <b>Media</b> class.
            </summary>
            <param name="mediaInformation"></param>
        </member>
        <member name="M:ImageVault.Common.Data.Media.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="P:ImageVault.Common.Data.Media.MediaFormatName">
            <summary>
            Get/Sets the MediaFormatName of the Media
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.Media.Id">
            <summary>
            Get/Sets the Id of the MediaItem that the Media represents
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.Media.MediaFormatId">
            <summary>
            Get/Sets the MediaFormatId of the Media
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.Media.Url">
            <summary>
            Get/Sets the Url of the Media
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.Media.ContentDisplayType">
            <summary>
            Get/Sets the ContentDisplayType of the Media
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.Media.Html">
            <summary>
            Get/Sets the Html of the Media
            </summary>
            <value>If the content has a suggested or required Html, it is supplied here</value>
        </member>
        <member name="P:ImageVault.Common.Data.Media.ContentType">
            <summary>
            Get/Sets the ContentType of the Media
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.Media.Name">
            <summary>
            Get/Sets the Name of the Media
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.Media.DisplayInformation">
            <summary>
            Get/Sets the DisplayInformation of the Media
            </summary>
            <value></value>
        </member>
        <member name="T:ImageVault.Common.Data.ISizeInformation">
            <summary>
            Defines a format information that contains size information 
            </summary>
        </member>
        <member name="P:ImageVault.Common.Data.ISizeInformation.Width">
            <summary>
            Get/Sets the Width of the Image
            </summary>
            <value>The actual width that the image will be after applying the conversion</value>
        </member>
        <member name="P:ImageVault.Common.Data.ISizeInformation.Height">
            <summary>
            Get/Sets the Height of the Image
            </summary>
            <value>The actual heigth that the image will be after applying the conversion</value>
        </member>
        <member name="P:ImageVault.Common.Data.ISizeInformation.AspectRatio">
            <summary>
            Get/Sets the AspectRatio of the ExtendedMediaInformation
            </summary>
            <value></value>
            <remarks>If not set and if a valid width and height are presented, the aspect ratio is calculated</remarks>
        </member>
        <member name="P:ImageVault.Common.Data.ISizeInformation.FormatWidth">
            <summary>
            Get/Sets the FormatWidth of the Image
            </summary>
            <value>The widht found in the media conversion or 0 if no width is set in the conversion</value>
        </member>
        <member name="P:ImageVault.Common.Data.ISizeInformation.FormatHeight">
            <summary>
            Get/Sets the FormatHeight of the Image
            </summary>
            <value>The height found in the media conversion or 0 if no height is set in the conversion</value>
        </member>
        <member name="P:ImageVault.Common.Data.ISizeInformation.FormatAspectRatio">
            <summary>
            Get/Sets the FormatAspectRatio of the Image
            </summary>
            <value>The AspectRatio found in the media conversion or 0 if n aspect ratio was set in the conversion</value>
        </member>
        <member name="M:ImageVault.Common.Data.WebMedia.#ctor">
            <summary>
            Initializes a new instance of the <b>WebMedia</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.WebMedia.#ctor(ImageVault.Common.Data.WebMedia)">
            <summary>
            Initializes a new instance of the <b>WebMedia</b> class.
            </summary>
            <param name="info"></param>
        </member>
        <member name="P:ImageVault.Common.Data.WebMedia.Width">
            <summary>
            Get/Sets the Width of the Image
            </summary>
            <value>The actual width that the image will be after applying the conversion</value>
        </member>
        <member name="P:ImageVault.Common.Data.WebMedia.Height">
            <summary>
            Get/Sets the Height of the Image
            </summary>
            <value>The actual heigth that the image will be after applying the conversion</value>
        </member>
        <member name="P:ImageVault.Common.Data.WebMedia.AspectRatio">
            <summary>
            Get/Sets the AspectRatio of the ExtendedMediaInformation
            </summary>
            <value></value>
            <remarks>If not set and if a valid width and height are presented, the aspect ratio is calculated</remarks>
        </member>
        <member name="P:ImageVault.Common.Data.WebMedia.FormatWidth">
            <summary>
            Get/Sets the FormatWidth of the Image
            </summary>
            <value>The widht found in the media conversion or 0 if no width is set in the conversion</value>
        </member>
        <member name="P:ImageVault.Common.Data.WebMedia.FormatHeight">
            <summary>
            Get/Sets the FormatHeight of the Image
            </summary>
            <value>The height found in the media conversion or 0 if no height is set in the conversion</value>
        </member>
        <member name="P:ImageVault.Common.Data.WebMedia.FormatAspectRatio">
            <summary>
            Get/Sets the FormatAspectRatio of the Image
            </summary>
            <value>The AspectRatio found in the media conversion or 0 if n aspect ratio was set in the conversion</value>
        </member>
        <member name="M:ImageVault.Common.Data.Video.#ctor">
            <summary>
            Initializes a new instance of the <b>Video</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.Video.#ctor(ImageVault.Common.Data.Video)">
            <summary>
            Initializes a new instance of the <b>Video</b> class.
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:ImageVault.Common.Data.Video.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="T:ImageVault.Common.Data.ResizeMode">
            <summary>
            A specification for how resizing is done
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.ResizeMode.ScaleToFit">
            <summary>
            Scales the media fit inside the specified width and height, aspect ratio is kept
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.ResizeMode.ScaleToFill">
            <summary>
            Scales the media to fit inside the specified width and height. 
            Cropping will occur if original and target aspect ratio differs.
            </summary>
        </member>
        <member name="T:ImageVault.Common.Data.Category">
            <summary>
            Defines a Category in ImageVault
            </summary>
            <remarks>
            2011-06-25 dan: Created
            </remarks>
        </member>
        <member name="M:ImageVault.Common.Data.Category.#ctor">
            <summary>
            Initializes a new instance of the <b>Category</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.Category.#ctor(ImageVault.Common.Data.Category)">
            <summary>
            Initializes a new instance of the <b>Category</b> class.
            </summary>
            <param name="category"></param>
        </member>
        <member name="P:ImageVault.Common.Data.Category.Name">
            <summary>
            Get/Sets the Name of the Category
            </summary>
            <value>The name of the category</value>
        </member>
        <member name="P:ImageVault.Common.Data.Category.Id">
            <summary>
            Get/Sets the Id of the Category
            </summary>
            <value>The id of the category</value>
        </member>
        <member name="P:ImageVault.Common.Data.Category.ParentId">
            <summary>
            id of the parent category
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.Category.Categories">
            <summary>
            Get/Sets the Categories of the Category
            </summary>
            <value>The <see cref="T:System.Collections.Generic.IList`1"/> containing the child categories for the category</value>
        </member>
        <member name="P:ImageVault.Common.Data.Category.IsUsed">
            <summary>
            If the category is assigned to any media item
            Needs to be popualated
            </summary>
        </member>
        <member name="T:ImageVault.Common.Lib.Wcf.CoreServiceEndpointAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="P:ImageVault.Common.Lib.Wcf.CoreServiceEndpointAttribute.EndPointType">
            <summary>
            Get/Sets the EndPointType of the CoreServiceEndpointAttribute
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Lib.Wcf.CoreServiceEndpointAttribute.TransferMode">
            <summary>
            Get/Sets the TransferMode of the CoreServiceEndpointAttribute
            </summary>
            <value></value>
        </member>
        <member name="T:ImageVault.Common.Services.IVaultService">
            <summary>
            This service supplies methods for working with Vaults
            </summary>
            <remarks>
            2011-02-02 dan: Created
            </remarks>
        </member>
        <member name="M:ImageVault.Common.Services.IVaultService.Find(ImageVault.Common.Data.Query.VaultQuery)">
            <summary>
            Find all vaults matching the query
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Services.IVaultService.Delete(System.Int32)">
            <summary>
            Delete a empty vault
            </summary>
            <param name="vaultId"></param>
        </member>
        <member name="M:ImageVault.Common.Services.IVaultService.Save(ImageVault.Common.Data.Vault,ImageVault.Common.Data.VaultServiceSaveOptions)">
            <summary>
            Creates or updates a vault
            </summary>
            <param name="vault"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="T:ImageVault.Common.Services.IMediaConversionService">
            <summary>
            Summary description for IMediaConversionService.
            </summary>
            <remarks>
            2011-08-10 dan: Created 
            </remarks>
        </member>
        <member name="T:ImageVault.Common.Data.MediaConversionTypes">
            <summary>
            Defines the different conversion types that we can convert to
            </summary>
            <remarks>
            2011-02-19 dan: Created
            </remarks>
        </member>
        <member name="F:ImageVault.Common.Data.MediaConversionTypes.Original">
            <summary>
            Original version of the media
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MediaConversionTypes.Image">
            <summary>
            A conversion to an image
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MediaConversionTypes.Generic">
            <summary>
            A generic conversion that keeps the original format as much as possible.
            </summary>
        </member>
        <member name="T:ImageVault.Common.Data.ImageFormat">
            <summary>
            Formats a media to an image.
            </summary>
            <remarks>
            2011-06-25 dan: Created
            </remarks>
        </member>
        <member name="T:ImageVault.Common.Data.ThumbnailFormat">
            <summary>
            A thumbnail format will always result in an image of the media.
            </summary>
            <remarks>
            2012-03-24 dan: Created
            </remarks>
        </member>
        <member name="M:ImageVault.Common.Data.ThumbnailFormat.#ctor">
            <summary>
            Initializes a new instance of the <b>ThumbnailFormat</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.ThumbnailFormat.#ctor(ImageVault.Common.Data.ThumbnailFormat)">
            <summary>
            Initializes a new instance of the <b>ThumbnailFormat</b> class.
            </summary>
            <param name="thumbnailFormat"></param>
        </member>
        <member name="M:ImageVault.Common.Data.ThumbnailFormat.CopyFrom(ImageVault.Common.Data.ThumbnailFormat)">
            <summary>
            Copies the values from the supplied format to the current instance
            </summary>
            <param name="format">The <see cref="T:ImageVault.Common.Data.ImageFormat"/> to copy from.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="format"/> is null.</exception>
        </member>
        <member name="M:ImageVault.Common.Data.ThumbnailFormat.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:ImageVault.Common.Data.ThumbnailFormat.Equals(ImageVault.Common.Data.ThumbnailFormat)">
            <summary>
            Determines whether the specified <see cref="T:ImageVault.Common.Data.ThumbnailFormat"/> is equal to the current 
            <b>ThumbnailFormat</b>.
            </summary>
            <param name="other">The <see cref="T:ImageVault.Common.Data.ThumbnailFormat"/> to compare with the current <see cref="T:ImageVault.Common.Data.ThumbnailFormat"/>.</param>
            <returns>true if the specified <see cref="T:ImageVault.Common.Data.ThumbnailFormat"/> is equal to the current <b>ThumbnailFormat</b>;
            otherwise, false.</returns>
        </member>
        <member name="M:ImageVault.Common.Data.ThumbnailFormat.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:ImageVault.Common.Data.ThumbnailFormat.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:ImageVault.Common.Data.ThumbnailFormat.IsEmpty">
            <summary>
            Checks if this is an empty format or not
            </summary>
            <value></value>
        </member>
        <member name="M:ImageVault.Common.Data.ImageFormat.#ctor">
            <summary>
            Initializes a new instance of the <b>ImageFormat</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.ImageFormat.#ctor(ImageVault.Common.Data.ImageFormat)">
            <summary>
            Initializes a new instance of the <b>ImageFormat</b> class.
            </summary>
            <param name="format"></param>
        </member>
        <member name="M:ImageVault.Common.Data.ImageFormat.CopyFrom(ImageVault.Common.Data.ImageFormat)">
            <summary>
            Copies the values from the supplied format to the current instance
            </summary>
            <param name="format">The <see cref="T:ImageVault.Common.Data.ImageFormat"/> to copy from.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="format"/> is null.</exception>
        </member>
        <member name="M:ImageVault.Common.Data.ImageFormat.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:ImageVault.Common.Data.ImageFormat.Equals(ImageVault.Common.Data.ImageFormat)">
            <summary>
            Determines whether the specified <see cref="T:ImageVault.Common.Data.ImageFormat"/> is equal to the current 
            <b>ImageFormat</b>.
            </summary>
            <param name="other">The <see cref="T:ImageVault.Common.Data.ImageFormat"/> to compare with the current <see cref="T:ImageVault.Common.Data.ImageFormat"/>.</param>
            <returns>true if the specified <see cref="T:ImageVault.Common.Data.ImageFormat"/> is equal to the current <b>ImageFormat</b>;
            otherwise, false.</returns>
        </member>
        <member name="M:ImageVault.Common.Data.ImageFormat.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:ImageVault.Common.Data.ImageFormat.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:ImageVault.Common.Data.ImageFormat.Dpi">
            <summary>
            Get/Sets the Dpi of the MediaConversion
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.ImageFormat.IccProfile">
            <summary>
            Get/Sets the IccProfile of the MediaConversion
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.ImageFormat.CompressionQuality">
            <summary>
            Get/Sets the CompressionQuality of the MediaConversion
            </summary>
            <value>A value from 0 to 100 where 0 is minimum quality and 100 is maximum quality</value>
        </member>
        <member name="P:ImageVault.Common.Data.ImageFormat.IsEmpty">
            <summary>
            Checks if this is an empty format or not
            </summary>
            <value></value>
        </member>
        <member name="T:ImageVault.Common.Data.Query.MediaItemFilter">
            <summary>
            Defines the filterdata that will be used to perform a query for mediaitems
            </summary>
            <remarks>
            2011-07-21 dan: Created
            </remarks>
        </member>
        <member name="M:ImageVault.Common.Data.Query.MediaItemFilter.#ctor">
            <summary>
            Initializes a new instance of the <b>MediaItemFilter</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.Query.MediaItemFilter.#ctor(ImageVault.Common.Data.Query.MediaItemFilter)">
            <summary>
            Initializes a new instance of the <b>MediaItemFilter</b> class.
            </summary>
            <param name="i"></param>
        </member>
        <member name="M:ImageVault.Common.Data.Query.MediaItemFilter.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="P:ImageVault.Common.Data.Query.MediaItemFilter.Id">
            <summary>
            Get/Sets the Id of the mediaitem(s) to match.
            </summary>
            <value>Finds a media item by this id(s). If this is set, other search parameters are ignored</value>
        </member>
        <member name="P:ImageVault.Common.Data.Query.MediaItemFilter.SearchString">
            <summary>
            The freetext search string
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.Query.MediaItemFilter.VaultId">
            <summary>
            The id of the vaults to search in (or null/0 if all of the users vaults should be included
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.Query.MediaItemFilter.CategoryId">
            <summary>
            The id of the category to search in (or null/0 if categories shouldn't be included in the filter)
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.Query.MediaItemFilter.MediaItemState">
            <summary>
            Get/Sets the MediaItemState of the MediaItemFilter
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.Query.MediaItemFilter.SortOrder">
            <summary>
            The order to sort the result
            </summary>
        </member>
        <member name="T:ImageVault.Common.Services.IMediaStorageService">
            <summary>
            Summary description for IMediaStorageService.
            </summary>
            <remarks>
            2011-08-10 dan: Created 
            </remarks>
        </member>
        <member name="M:ImageVault.Common.Services.IMediaStorageService.GetActiveStorageLicenseAgreement">
            <summary>
            Retrieves all license agreements for the active storages.
            </summary>
            <returns>The <see cref="T:System.Collections.Generic.IList`1"/> containing the active storages license agreements</returns>
        </member>
        <member name="M:ImageVault.Common.Services.IMediaStorageService.GetStorageInfo(System.Int32)">
            <summary>
            Gets storage infomation for the current media item
            </summary>
            <param name="mediaItemId"></param>
            <returns></returns>
        </member>
        <member name="T:ImageVault.Common.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:ImageVault.Common.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:ImageVault.Common.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:ImageVault.Common.Properties.Resources.GlobalRoles_Administrator">
            <summary>
              Looks up a localized string similar to Administrator.
            </summary>
        </member>
        <member name="P:ImageVault.Common.Properties.Resources.GlobalRoles_CategoryAdministrator">
            <summary>
              Looks up a localized string similar to Category administrator.
            </summary>
        </member>
        <member name="P:ImageVault.Common.Properties.Resources.GlobalRoles_MediaFormatAdministrator">
            <summary>
              Looks up a localized string similar to Media format administrator.
            </summary>
        </member>
        <member name="P:ImageVault.Common.Properties.Resources.MediaContentService_CreateOriginalContentReference_MediaContent_must_contain_a_name">
            <summary>
              Looks up a localized string similar to MediaContent must contain a name.
            </summary>
        </member>
        <member name="P:ImageVault.Common.Properties.Resources.MediaConversionTypes_Generic">
            <summary>
              Looks up a localized string similar to Generic.
            </summary>
        </member>
        <member name="P:ImageVault.Common.Properties.Resources.MediaConversionTypes_Image">
            <summary>
              Looks up a localized string similar to Image.
            </summary>
        </member>
        <member name="P:ImageVault.Common.Properties.Resources.MediaConversionTypes_Original">
            <summary>
              Looks up a localized string similar to Original.
            </summary>
        </member>
        <member name="P:ImageVault.Common.Properties.Resources.MediaFormatOutputTypes_Eps">
            <summary>
              Looks up a localized string similar to Eps.
            </summary>
        </member>
        <member name="P:ImageVault.Common.Properties.Resources.MediaFormatOutputTypes_Gif">
            <summary>
              Looks up a localized string similar to Gif.
            </summary>
        </member>
        <member name="P:ImageVault.Common.Properties.Resources.MediaFormatOutputTypes_Jpeg">
            <summary>
              Looks up a localized string similar to Jpeg.
            </summary>
        </member>
        <member name="P:ImageVault.Common.Properties.Resources.MediaFormatOutputTypes_Original">
            <summary>
              Looks up a localized string similar to Original.
            </summary>
        </member>
        <member name="P:ImageVault.Common.Properties.Resources.MediaFormatOutputTypes_Png">
            <summary>
              Looks up a localized string similar to Png.
            </summary>
        </member>
        <member name="P:ImageVault.Common.Properties.Resources.MediaFormatOutputTypes_Tiff">
            <summary>
              Looks up a localized string similar to Tiff.
            </summary>
        </member>
        <member name="P:ImageVault.Common.Properties.Resources.MediaFormatOutputTypes_Unknown">
            <summary>
              Looks up a localized string similar to Unknown format.
            </summary>
        </member>
        <member name="P:ImageVault.Common.Properties.Resources.MediaFormatOutputTypes_WebSafe">
            <summary>
              Looks up a localized string similar to Websafe.
            </summary>
        </member>
        <member name="P:ImageVault.Common.Properties.Resources.MetadataTypes_Boolean">
            <summary>
              Looks up a localized string similar to True/False.
            </summary>
        </member>
        <member name="P:ImageVault.Common.Properties.Resources.MetadataTypes_DateTime">
            <summary>
              Looks up a localized string similar to Date and Time.
            </summary>
        </member>
        <member name="P:ImageVault.Common.Properties.Resources.MetadataTypes_Decimal">
            <summary>
              Looks up a localized string similar to Decimal.
            </summary>
        </member>
        <member name="P:ImageVault.Common.Properties.Resources.MetadataTypes_Integer">
            <summary>
              Looks up a localized string similar to Number.
            </summary>
        </member>
        <member name="P:ImageVault.Common.Properties.Resources.MetadataTypes_LongString">
            <summary>
              Looks up a localized string similar to Long text.
            </summary>
        </member>
        <member name="P:ImageVault.Common.Properties.Resources.MetadataTypes_String">
            <summary>
              Looks up a localized string similar to Text.
            </summary>
        </member>
        <member name="P:ImageVault.Common.Properties.Resources.MetadataTypes_Undefined">
            <summary>
              Looks up a localized string similar to Undefined.
            </summary>
        </member>
        <member name="P:ImageVault.Common.Properties.Resources.ResizeMode_ScaleToFill">
            <summary>
              Looks up a localized string similar to Scale to fill.
            </summary>
        </member>
        <member name="P:ImageVault.Common.Properties.Resources.ResizeMode_ScaleToFit">
            <summary>
              Looks up a localized string similar to Scale to fit.
            </summary>
        </member>
        <member name="T:ImageVault.Common.Data.MetadataDefinitionTypes">
            <summary>
            Defines the different types of metadata definitions that exists
            </summary>
            <remarks>
            2011-03-17 dan: Created
            </remarks>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataDefinitionTypes.Undefined">
            <summary>
            Undefined
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataDefinitionTypes.System">
            <summary>
            A System DbMetadata definition type defines a metadata that is defined by the Imagevault system
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataDefinitionTypes.User">
            <summary>
            Defines a User defined metadata type
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataDefinitionTypes.Iptc">
            <summary>
            Defines an Iptc metadata type
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataDefinitionTypes.Exif">
            <summary>
            Defines an Exif metadata type
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataDefinitionTypes.Xmp">
            <summary>
            Defines the XMP metadata type
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataDefinitionTypes.Id3V1">
            <summary>
            Defines the Id3v1 metadata type
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataDefinitionTypes.Id3V2">
            <summary>
            Defines the Id3v1 metadata type
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataDefinitionTypes.Riff">
            <summary>
            Defines the Riff metadata type
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataDefinitionTypes.Jfif">
            <summary>
            Defines the JFIF metadata type
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataDefinitionTypes.Gps">
            <summary>
            Defines the GPS metadata type
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataDefinitionTypes.PhotoshopIrb">
            <summary>
            Defines the Photoshop IRB metadata type
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataDefinitionTypes.FlashPix">
            <summary>
            Defines the FlashPix metadata type
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataDefinitionTypes.Afcp">
            <summary>
            Defines the AFCP metadata type
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataDefinitionTypes.GeoTiff">
            <summary>
            Defines the GeoTIFF metadata type
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataDefinitionTypes.IccProfile">
            <summary>
            Defines the ICC Profile metadata type
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataDefinitionTypes.WindowsMedia">
            <summary>
            Defines the Windows Media metadata type
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataDefinitionTypes.Dicom">
            <summary>
            Leadtools specific metadata
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataDefinitionTypes.MakerNotesCanon">
            <summary>
            Defines the MakerNotes Canon metadata type
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataDefinitionTypes.MakerNotesCasio">
            <summary>
            Defines the MakerNotes Casio metadata type
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataDefinitionTypes.MakerNotesFujiFilm">
            <summary>
            Defines the MakerNotes FujiFilm metadata type
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataDefinitionTypes.MakerNotesGe">
            <summary>
            Defines the MakerNotes GE metadata type
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataDefinitionTypes.MakerNotesHp">
            <summary>
            Defines the MakerNotes HP metadata type
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataDefinitionTypes.MakerNotesJvcVictor">
            <summary>
            Defines the MakerNotes JVC/Victor metadata type
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataDefinitionTypes.MakerNotesKodak">
            <summary>
            Defines the MakerNotes Kodak metadata type
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataDefinitionTypes.MakerNotesLeaf">
            <summary>
            Defines the MakerNotes Leaf metadata type
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataDefinitionTypes.MakerNotesMinoltaKonicaMinolta">
            <summary>
            Defines the MakerNotes Minolta/Konica-Minolta metadata type
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataDefinitionTypes.MakerNotesNikon">
            <summary>
            Defines the MakerNotes Nikon metadata type
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataDefinitionTypes.MakerNotesOlympusEpson">
            <summary>
            Defines the MakerNotes Olympus/Epson metadata type
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataDefinitionTypes.MakerNotesPanasonicLeica">
            <summary>
            Defines the MakerNotes Panasonic/Leica metadata type
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataDefinitionTypes.UserDefined1">
            <summary>
            UserDefined1
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataDefinitionTypes.UserDefined2">
            <summary>
            UserDefined2
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataDefinitionTypes.UserDefined3">
            <summary>
            UserDefined3
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataDefinitionTypes.UserDefined4">
            <summary>
            UserDefined4
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataDefinitionTypes.UserDefined5">
            <summary>
            UserDefined5
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataDefinitionTypes.UserDefined6">
            <summary>
            UserDefined6
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataDefinitionTypes.UserDefined7">
            <summary>
            UserDefined7
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataDefinitionTypes.UserDefined8">
            <summary>
            UserDefined8
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataDefinitionTypes.UserDefined9">
            <summary>
            UserDefined9
            </summary>
        </member>
        <member name="T:ImageVault.Common.Data.MediaItem">
            <summary>
            Summary description for MediaItem.
            </summary>
            <remarks>
            2011-07-18 dan: Created
            </remarks>
            <example></example>
        </member>
        <member name="M:ImageVault.Common.Data.MediaItem.#ctor">
            <summary>
            Initializes a new instance of the <b>MediaItem</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.MediaItem.#ctor(ImageVault.Common.Data.MediaItem)">
            <summary>
            Initializes a new instance of the <b>MediaItem</b> class.
            </summary>
            <param name="mediaItem"></param>
        </member>
        <member name="M:ImageVault.Common.Data.MediaItem.CopyTo(ImageVault.Common.Data.MediaItem)">
            <summary>
            Copies the information from one mediaitem to another...
            </summary>
            <param name="mi"></param>
        </member>
        <member name="P:ImageVault.Common.Data.MediaItem.Id">
            <summary>
            Get/Sets the Id of the MediaItem
            </summary>
            <value>The id of the mediaitem</value>
        </member>
        <member name="P:ImageVault.Common.Data.MediaItem.VaultId">
            <summary>
            Get/Sets the VaultId of the MediaItem
            </summary>
            <value>The Id of the vault where the item resides</value>
        </member>
        <member name="P:ImageVault.Common.Data.MediaItem.Name">
            <summary>
            Get/Sets the Name of the MediaItem
            </summary>
            <value>The name of the media item</value>
        </member>
        <member name="P:ImageVault.Common.Data.MediaItem.CanBeDownloaded">
            <summary>
            Get/Sets the CanBeDownloaded of the MediaItem
            </summary>
            <value>If the media item is downloadable</value>
        </member>
        <member name="P:ImageVault.Common.Data.MediaItem.MediaConversions">
            <summary>
            Get/Sets the MediaFormats of the MediaItem
            </summary>
            <value>The <see cref="T:System.Collections.Generic.List`1"/> that was populated</value>
        </member>
        <member name="P:ImageVault.Common.Data.MediaItem.Metadata">
            <summary>
            Get/Sets the Metadata of the MediaItem
            </summary>
            <value>The populated metadata</value>
        </member>
        <member name="P:ImageVault.Common.Data.MediaItem.Categories">
            <summary>
            Get/Sets the Categories of the MediaItem
            </summary>
            <value>The <see cref="T:System.Collections.Generic.List`1"/> of the item (if it is populated)</value>
        </member>
        <member name="P:ImageVault.Common.Data.MediaItem.PublishInformation">
            <summary>
            Get/Sets the PublishInformation of the MediaItem
            </summary>
            <value>The <see cref="T:System.Collections.Generic.List`1"/> if it is populated</value>
        </member>
        <member name="P:ImageVault.Common.Data.MediaItem.DateAdded">
            <summary>
            Get/Sets the DateAdded of the MediaItem
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.MediaItem.Access">
            <summary>
            Get/Sets the Access of the MediaItem
            </summary>
            <remarks>Not populated by default populated</remarks>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.MediaItem.AddedBy">
            <summary>
            Get/Sets the AddedBy of the MediaItem
            </summary>
            <value>The name of the user that added the image</value>
        </member>
        <member name="T:ImageVault.Common.Data.GlobalRoles">
            <summary>
            Defines all global roles in the system
            </summary>
            <remarks>
            2011-05-09 dan: Created
            </remarks>
        </member>
        <member name="F:ImageVault.Common.Data.GlobalRoles.None">
            <summary>
            User is not part of a global role
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.GlobalRoles.Administrator">
            <summary>
            The Administrator role. Can administer anything
            </summary>
            
        </member>
        <member name="F:ImageVault.Common.Data.GlobalRoles.MediaFormatAdministrator">
            <summary>
            MediaFormatAdministrator. Can administer conversion formats
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.GlobalRoles.CategoryAdministrator">
            <summary>
            CategoryAdministrator. Can administer categories
            </summary>
        </member>
        <member name="T:ImageVault.Common.Data.Query.MetadataQuery">
            <summary>
            The query for finding metadata
            </summary>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="M:ImageVault.Common.Data.Query.MetadataQuery.#ctor">
            <summary>
            Initializes a new instance of the <b>MetadataQuery</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.Query.MetadataQuery.#ctor(ImageVault.Common.Data.Query.MetadataQuery)">
            <summary>
            Initializes a new instance of the <b>MetadataQuery</b> class.
            </summary>
            <param name="metadataQuery"></param>
        </member>
        <member name="M:ImageVault.Common.Data.Query.MetadataQuery.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:ImageVault.Common.Data.Query.MetadataQuery.System#ICloneable#Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="T:ImageVault.Common.Data.Display.Node">
            <summary>
            Defines a base node for a html segment
            </summary>
            <remarks>
            2012-08-21 dan: Created
            </remarks>
        </member>
        <member name="M:ImageVault.Common.Data.Display.Node.BindAttribute(System.String,ImageVault.Common.Data.Display.AttributeBindName)">
            <summary>
            Binds a value to a attribute
            </summary>
            <param name="value"></param>
            <param name="bindValue"></param>
        </member>
        <member name="M:ImageVault.Common.Data.Display.Node.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:ImageVault.Common.Data.Display.Node.System#ICloneable#Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="T:ImageVault.Common.Data.Display.DisplayInformation">
            <summary>
            Summary description for DisplayInformation.
            </summary>
            <remarks>
            2011-08-12 dan: Created
            </remarks>
        </member>
        <member name="M:ImageVault.Common.Data.Display.DisplayInformation.#ctor">
            <summary>
            Initializes a new instance of the <b>DisplayInformation</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.Display.DisplayInformation.#ctor(ImageVault.Common.Data.Display.DisplayInformation)">
            <summary>
            Initializes a new instance of the <b>DisplayInformation</b> class.
            </summary>
            <param name="displayInformation"></param>
        </member>
        <member name="M:ImageVault.Common.Data.Display.DisplayInformation.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="P:ImageVault.Common.Data.Display.DisplayInformation.ContentDisplayType">
            <summary>
            Get/Sets the ContentDisplayType of the DisplayInformation
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.Display.DisplayInformation.DefaultEmbedElement">
            <summary>
            Get/Sets the Html of the DisplayInformation
            </summary>
            <value></value>
        </member>
        <member name="T:ImageVault.Common.Data.PublishInformation">
            <summary>
            The Publishing source information for a specific media item
            </summary>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="M:ImageVault.Common.Data.PublishInformation.#ctor">
            <summary>
            Initializes a new instance of the <b>PublishInformation</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.PublishInformation.#ctor(ImageVault.Common.Data.PublishInformation)">
            <summary>
            Initializes a new instance of the <b>PublishInformation</b> class.
            </summary>
            <param name="publishInformation"></param>
        </member>
        <member name="P:ImageVault.Common.Data.PublishInformation.PublishingSourceId">
            <summary>
            Get/Sets the PublishingSourceId of the PublishInformation
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.PublishInformation.PublishingSourceIdentifier">
            <summary>
            Get/Sets the PublishingSourceIdentifier of the PublishInformation
            </summary>
            <value>The identifier of the publishing source</value>
        </member>
        <member name="T:ImageVault.Common.Data.MetadataDateTime">
            <summary>
            Summary description for MetadataDateTime.
            </summary>
            <remarks>
            2011-04-14 dan: Created
            </remarks>
        </member>
        <member name="M:ImageVault.Common.Data.MetadataDateTime.#ctor(ImageVault.Common.Data.MetadataDefinition,System.Nullable{System.Int32},System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <b>MetadataDateTime</b> class.
            </summary>
            <param name="definition"></param>
            <param name="languageId"></param>
            <param name="isMandantory"></param>
            <param name="isTitle"></param>
            <param name="isAltText"></param>
            <param name="isDefinedInVault"></param>
        </member>
        <member name="M:ImageVault.Common.Data.MetadataDateTime.#ctor">
            <summary>
            Initializes a new instance of the <b>MetadataDateTime</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.MetadataDateTime.#ctor(ImageVault.Common.Data.MetadataDateTime)">
            <summary>
            Initializes a new instance of the <b>MetadataDateTime</b> class.
            </summary>
            <param name="metadataDateTime"></param>
        </member>
        <member name="M:ImageVault.Common.Data.MetadataDateTime.Parse(System.String)">
            <summary>
            Parses the supplied value and assigns it to the metadata
            </summary>
            <param name="value"></param>
            <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">If the value is not a valid DateTime.</exception>
        </member>
        <member name="P:ImageVault.Common.Data.MetadataDateTime.InnerValue">
            <summary>
            Get/Sets the InnerValue of the Metadata
            </summary>
            <value>The value for all metadata objects. If <see cref="P:ImageVault.Common.Data.Metadata.IsCoherent"/> is false this only contains the value of the first item</value>
        </member>
        <member name="P:ImageVault.Common.Data.MetadataDateTime.DateTimeValue">
            <summary>
            Get/Sets the DateTimeValue of the MetadataBoolean
            </summary>
            <value></value>
        </member>
        <member name="T:ImageVault.Common.Data.Identity">
            <summary>
            Summary description for Identity.
            </summary>
            <remarks>
            2011-09-29 dan: Created
            </remarks>
        </member>
        <member name="M:ImageVault.Common.Data.Identity.#ctor">
            <summary>
            Initializes a new instance of the <b>Identity</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.Identity.#ctor(System.String,ImageVault.Common.Data.Query.IdentityTypes)">
            <summary>
            Initializes a new instance of the <b>Identity</b> class.
            </summary>
            <param name="name"></param>
            <param name="type"></param>
        </member>
        <member name="M:ImageVault.Common.Data.Identity.#ctor(ImageVault.Common.Data.Identity)">
            <summary>
            Initializes a new instance of the <b>Identity</b> class.
            </summary>
            <param name="identity"></param>
        </member>
        <member name="P:ImageVault.Common.Data.Identity.Name">
            <summary>
            Get/Sets the Name of the Identity
            </summary>
            <value>The name of the identity</value>
        </member>
        <member name="P:ImageVault.Common.Data.Identity.Type">
            <summary>
            Get/Sets the Type of the Identity
            </summary>
            <value>The <see cref="T:ImageVault.Common.Data.Query.IdentityTypes"/> of the identity</value>
        </member>
        <member name="P:ImageVault.Common.Data.Identity.Roles">
            <summary>
            Get/Sets the Roles of the Identity
            </summary>
            <value></value>
        </member>
        <member name="T:ImageVault.Common.Data.Caching.CacheHelper">
            <summary>
            Summary description for CacheHelper.
            </summary>
            <remarks>
            2011-04-01 dan: Created
            </remarks>
        </member>
        <member name="M:ImageVault.Common.Data.Caching.CacheHelper.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <b>CacheHelper</b> class.
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:ImageVault.Common.Data.Caching.CacheHelper.Get(System.String)">
            <summary>
            Gets an item from the cache
            </summary>
            <param name="name">Name of the item to get</param>
            <returns>The found item or null if no item was found</returns>
        </member>
        <member name="M:ImageVault.Common.Data.Caching.CacheHelper.GetKey(System.String)">
            <summary>
            Calculates the key of the cached item
            </summary>
            <param name="name">The public name of the item</param>
            <returns>The internal key of the item</returns>
        </member>
        <member name="M:ImageVault.Common.Data.Caching.CacheHelper.Add(System.String,System.Object)">
            <summary>
            Adds an item to the cache
            </summary>
            <param name="name">The name of the item to add</param>
            <param name="value">The value of the item to add</param>
        </member>
        <member name="M:ImageVault.Common.Data.Caching.CacheHelper.AddSlidingCache(System.String,System.Object,System.TimeSpan)">
            <summary>
            Adds an item to the cache with a sliding expiration
            </summary>
            <param name="name">The name of the item to add</param>
            <param name="value">The value of the item to add</param>
            <param name="slidingExpiration">The sliding <see cref="T:System.TimeSpan"/> </param>
        </member>
        <member name="M:ImageVault.Common.Data.Caching.CacheHelper.Add(System.String,System.Object,System.Web.Caching.CacheDependency,System.DateTime,System.TimeSpan,System.Web.Caching.CacheItemPriority,System.Web.Caching.CacheItemRemovedCallback)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="dependency"></param>
            <param name="absoluteExpiration"></param>
            <param name="slidingExpiration"></param>
            <param name="priority"></param>
            <param name="onRemoveCallback"></param>
        </member>
        <member name="M:ImageVault.Common.Data.Caching.CacheHelper.System#Collections#Generic#IEnumerable{System#String}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:ImageVault.Common.Data.Caching.CacheHelper.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an IEnumerator to use for enumerating all items in the cache
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Data.Caching.CacheHelper.Remove(System.String)">
            <summary>
            Removes an item from the cache
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:ImageVault.Common.Data.Caching.CacheHelper.RemoveItemsStartingWith(System.String)">
            <summary>
            Removes items from the cache whos names starts with the given prefix
            </summary>
            <param name="namePrefix"></param>
        </member>
        <member name="M:ImageVault.Common.Data.Caching.CacheHelper.Clear">
            <summary>
            Clears all cached values for this type
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.Caching.CacheHelper.GetOrCreate``1(System.String,System.Func{``0},System.Web.Caching.CacheDependency,System.Nullable{System.DateTime},System.Nullable{System.TimeSpan},System.Web.Caching.CacheItemPriority,System.Web.Caching.CacheItemRemovedCallback)">
            <summary>
            This provides a threadsafe way to get a value from the cache or if the cache is missing, create it in a threadsafe way.
            </summary>
            <param name="name">The name of the item to get</param>
            <param name="createAction">The <see cref="T:System.Func`1"/> to call if the value is not present that will create the value to enter in the cache</param>
            <param name="dependency"></param>
            <param name="absoluteExpiration"></param>
            <param name="slidingExpiration"></param>
            <param name="priority"></param>
            <param name="onRemoveCallback"></param>
            <typeparam name="T">The type of object to get</typeparam>
            <returns>The retrieved or created value</returns>
        </member>
        <member name="M:ImageVault.Common.Data.Caching.CacheHelper.GetOrCreateSlidingCache``1(System.String,System.Func{``0},System.TimeSpan)">
            <summary>
            This provides a threadsafe way to get a value from the cache or if the cache is missing, create it in a threadsafe way.
            </summary>
            <param name="name"></param>
            <param name="createAction"></param>
            <param name="slidingExpiration"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Data.Caching.CacheHelper.GetKeys(System.Web.Caching.Cache)">
            <summary>
            Returns an enumerable over the keys in the supplied Cache
            </summary>
            <param name="cache"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Data.Caching.CacheHelper.ClearAll">
            <summary>
            Removes all cached items in the MasterCache (which might be HttpRuntime.Cache)
            </summary>
            <remarks>May remove cache outside the CacheHelper instances.</remarks>
        </member>
        <member name="M:ImageVault.Common.Data.Caching.CacheHelper.ClearAll(System.Type)">
            <summary>
            Clears the cache for a specific type
            </summary>
            <param name="type"></param>
        </member>
        <member name="P:ImageVault.Common.Data.Caching.CacheHelper.MasterCache">
            <summary>
            Gets the MasterCache of the CacheHelper
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.Caching.CacheHelper.Count">
            <summary>
            Gets the Count of the CacheHelper
            </summary>
            <value></value>
        </member>
        <member name="T:ImageVault.Common.Services.IMediaContentService">
            <summary>
            Summary description for IMediaContentService.
            </summary>
            <remarks>
            2011-08-12 dan: Created 
            </remarks>
        </member>
        <member name="M:ImageVault.Common.Services.IMediaContentService.CreateZipArchive(System.Collections.Generic.IEnumerable{System.Int32},System.Int32)">
            <summary>
            Creates a zip archive for the supplied items
            </summary>
            <param name="mediaItemIds">The id of items to include in the archive</param>
            <param name="mediaFormatId">The id of the mediaFormatId to get them in</param>
            <returns>The key to use to retrieve the archive</returns>
        </member>
        <member name="M:ImageVault.Common.Services.IMediaContentService.StoreContentInVault(System.String,System.String,System.String,System.Int32)">
            <summary>
            Finalizes the upload by indicating that the uploaded file is completed and are ready to be analyzed
            </summary>
            <param name="uploadFileId">The id of the file that was uploaded</param>
            <param name="filename">The original filename</param>
            <param name="contentType">The contentType of the file</param>
            <param name="vaultId">The id of the vault to store it in.</param>
            <returns>The <see cref="T:ImageVault.Common.Data.MediaItem"/> for the uploaded item</returns>
            <exception cref="T:System.Security.Authentication.AuthenticationException">If you need to be authenticated to create media items.</exception>
        </member>
        <member name="M:ImageVault.Common.Services.IMediaContentService.PublishMedia(System.String,System.String)">
            <summary>
            Publishes the supplied media using the identifier and returns the published key
            </summary>
            <param name="mediaContentReferenceId">The id of the mediaContentreference to publish</param>
            <param name="publishIdentifier">The publish identifier to use</param>
            <returns>The id of the publishedMediaContentReference</returns>
        </member>
        <member name="T:ImageVault.Common.Services.ICategoryService">
            <summary>
            The Category service provides methods for using categories
            </summary>
            <remarks>
            2011-08-10 dan: Created 
            </remarks>
        </member>
        <member name="M:ImageVault.Common.Services.ICategoryService.GetCategories">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Services.ICategoryService.Find(ImageVault.Common.Data.Query.CategoryQuery)">
            <summary>
            Find categorys from a query
            </summary>
            <param name="q"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Services.ICategoryService.Save(ImageVault.Common.Data.Category)">
            <summary>
            Creates och update a category
            </summary>
            <param name="category"></param>
            <returns>the id of category</returns>
        </member>
        <member name="M:ImageVault.Common.Services.ICategoryService.Delete(System.Int32)">
            <summary>
            Delete a category (and all child categories)
            </summary>
            <param name="categoryId">The id of the category to delete</param>
            <exception cref="T:System.UnauthorizedAccessException">If the user lacks access for the operation</exception>
        </member>
        <member name="T:ImageVault.Common.Data.MetadataDecimal">
            <summary>
            Summary description for MetadataDecimal.
            </summary>
            <remarks>
            2011-04-14 dan: Created
            </remarks>
        </member>
        <member name="M:ImageVault.Common.Data.MetadataDecimal.#ctor(ImageVault.Common.Data.MetadataDefinition,System.Nullable{System.Int32},System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <b>MetadataDecimal</b> class.
            </summary>
            <param name="definition"></param>
            <param name="languageId"></param>
            <param name="isMandantory"></param>
            <param name="isTitle"></param>
            <param name="isAltText"></param>
            <param name="isDefinedInVault"></param>
        </member>
        <member name="M:ImageVault.Common.Data.MetadataDecimal.#ctor">
            <summary>
            Initializes a new instance of the <b>MetadataDecimal</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.MetadataDecimal.#ctor(ImageVault.Common.Data.MetadataDecimal)">
            <summary>
            Initializes a new instance of the <b>MetadataDecimal</b> class.
            </summary>
            <param name="metadataDecimal"></param>
        </member>
        <member name="M:ImageVault.Common.Data.MetadataDecimal.Parse(System.String)">
            <summary>
            Parses the supplied value and assigns it to the metadata
            </summary>
            <param name="value"></param>
            <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">If the value is not a valid decimal.</exception>
        </member>
        <member name="P:ImageVault.Common.Data.MetadataDecimal.DecimalValue">
            <summary>
            Get/Sets the DecimalValue of the MetadataDecimal
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.MetadataDecimal.InnerValue">
            <summary>
            Get/Sets the InnerValue of the MetadataDecimal
            </summary>
            <value></value>
        </member>
        <member name="T:ImageVault.Common.Data.Query.MediaItemQuery">
            <summary>
            </summary>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="P:ImageVault.Common.Data.Query.MediaItemQuery.Populate">
            <summary>
            Get/Sets the Populate of the MediaItemQuery
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.Query.MediaItemQuery.MediaUrlBase">
            <summary>
            Get/Sets the MediaUrlBase of the MediaItemQuery
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.Query.MediaItemQuery.DefaultMediaUrlBase">
            <summary>
            Get/Sets the DefaultMediaUrlBase of the MediaItemQuery
            </summary>
            <remarks>This will be set by the client and will always have the same value as the ClientConfigurationSection.Instance.DefaultMediaUrlBase</remarks>
            <value>Set this to automatically populate MediaUrlBase for the application</value>
        </member>
        <member name="T:ImageVault.Common.Data.Query.IdentityFilter">
            <summary>
            Defines the filter for a Identity query
            </summary>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="M:ImageVault.Common.Data.Query.IdentityFilter.#ctor">
            <summary>
            Initializes a new instance of the <b>IdentityFilter</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.Query.IdentityFilter.#ctor(ImageVault.Common.Data.Query.IdentityFilter)">
            <summary>
            Initializes a new instance of the <b>IdentityFilter</b> class.
            </summary>
            <param name="i"></param>
        </member>
        <member name="M:ImageVault.Common.Data.Query.IdentityFilter.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="P:ImageVault.Common.Data.Query.IdentityFilter.SearchString">
            <summary>
            Get/Sets the SearchString of the IdentityFilter
            </summary>
            <value>Can contain wildcards (*)</value>
        </member>
        <member name="P:ImageVault.Common.Data.Query.IdentityFilter.IdentityTypes">
            <summary>
            Get/Sets the IdentityTypes of the IdentityFilter
            </summary>
            <remarks>If you specify <see cref="F:ImageVault.Common.Data.Query.IdentityTypes.Any"/> it will place all matching group identities before adding user identities.</remarks>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.Query.IdentityFilter.Name">
            <summary>
            Get/Sets the Name of the IdentityFilter
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.Query.IdentityFilter.Roles">
            <summary>
            Get users and groups belonging to a global Role
            </summary>
            <value></value>
        </member>
        <member name="T:ImageVault.Common.Data.MediaFormatTypeAttribute">
            <summary>
            This attribute should be placed on Media classes to point out which type of Format that the Media represents.
            </summary>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="M:ImageVault.Common.Data.MediaFormatTypeAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <b>MediaFormatTypeAttribute</b> class.
            </summary>
            <param name="type"></param>
        </member>
        <member name="P:ImageVault.Common.Data.MediaFormatTypeAttribute.FormatType">
            <summary>
            Get/Sets the FormatType of the MediaFormatTypeAttribute
            </summary>
            <value></value>
        </member>
        <member name="T:ImageVault.Common.Services.IMetadataDefinitionService">
            <summary>
            Contains methods for working with metadata definitions
            </summary>
            <remarks>
            2011-03-20 dan: Created
            </remarks>
        </member>
        <member name="M:ImageVault.Common.Services.IMetadataDefinitionService.Find(ImageVault.Common.Data.Query.MetadataDefinitionQuery)">
            <summary>
            Find and populate metadata definitions
            </summary>
            <param name="q">Query for filtering and populating</param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Services.IMetadataDefinitionService.Save(ImageVault.Common.Data.MetadataDefinition)">
            <summary>
            Create or update a metadata definition
            </summary>
            <param name="metadataDefinition"></param>
            <returns>The id of metadata definition</returns>
        </member>
        <member name="M:ImageVault.Common.Services.IMetadataDefinitionService.Delete(System.Int32)">
            <summary>
            Delete a metadata definition
            </summary>
            <param name="id">The metadata definition id</param>
        </member>
        <member name="M:ImageVault.Common.Services.IMetadataDefinitionService.IsInUse(System.Int32)">
            <summary>
            Check if a metadata definition is in use
            </summary>
            <param name="metadataDefinitionId"></param>
            <returns></returns>
        </member>
        <member name="T:ImageVault.Common.Data.MetadataTypes">
            <summary>
            Enum that matches rows in table MetadataTypes
            </summary>
            <remarks>
            2011-03-15 johan k: Created
            </remarks>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataTypes.Undefined">
            <summary>
            Undefined
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataTypes.String">
            <summary>
            String
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataTypes.DateTime">
            <summary>
            DateTime
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataTypes.Integer">
            <summary>
            Integer
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataTypes.Boolean">
            <summary>
            Boolean
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataTypes.LongString">
            <summary>
            LongString
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataTypes.Decimal">
            <summary>
            Decimal
            </summary>
        </member>
        <member name="T:ImageVault.Common.Data.Query.VaultFilter">
            <summary>
            Defines the filter used to find vaults
            </summary>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="M:ImageVault.Common.Data.Query.VaultFilter.#ctor">
            <summary>
            Initializes a new instance of the <b>VaultFilter</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.Query.VaultFilter.#ctor(ImageVault.Common.Data.Query.VaultFilter)">
            <summary>
            Initializes a new instance of the <b>VaultFilter</b> class.
            </summary>
            <param name="i"></param>
        </member>
        <member name="M:ImageVault.Common.Data.Query.VaultFilter.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:ImageVault.Common.Data.Query.VaultFilter.Id">
            <summary>
            Get/Sets the Id of the VaultFilter
            </summary>
            <value>The id of the vault to get or null to ignore the id of the vault</value>
        </member>
        <member name="P:ImageVault.Common.Data.Query.VaultFilter.UserMinAccess">
            <summary>
            Get/Sets the UserMinAccess of the VaultFilter
            </summary>
            <value>The minimum access that the current user should have</value>
        </member>
        <member name="T:ImageVault.Common.Data.Query.MetadataFilter">
            <summary>
            Defines the filter for finding metadata 
            </summary>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="M:ImageVault.Common.Data.Query.MetadataFilter.#ctor">
            <summary>
            Initializes a new instance of the <b>MetadataFilter</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.Query.MetadataFilter.#ctor(ImageVault.Common.Data.Query.MetadataFilter)">
            <summary>
            Initializes a new instance of the <b>MetadataFilter</b> class.
            </summary>
            <param name="i"></param>
        </member>
        <member name="M:ImageVault.Common.Data.Query.MetadataFilter.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="P:ImageVault.Common.Data.Query.MetadataFilter.MetadataDefinitionId">
            <summary>
            Get/Sets the MetadataDefinitionId of the MetadataQuery
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.Query.MetadataFilter.Name">
            <summary>
            Get/Sets the Name of the MetadataQuery
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.Query.MetadataFilter.MetadataDefinitionType">
            <summary>
            Get/Sets the MetadataDefinitionType of the MetadataQuery
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.Query.MetadataFilter.IsAltText">
            <summary>
            Get/Sets the IsAltText of the MetadataQuery
            </summary>
            <value>Finds metadata that are marked as alt text in the vault</value>
        </member>
        <member name="P:ImageVault.Common.Data.Query.MetadataFilter.IsTitle">
            <summary>
            Get/Sets the IsTitle of the MetadataQuery
            </summary>
            <value>Finds metadata that are marked as title in the vault</value>
        </member>
        <member name="P:ImageVault.Common.Data.Query.MetadataFilter.IsDefinedInVault">
            <summary>
            Inlcude metadata that is defined in each vault
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.Query.MetadataFilter.IsNull">
            <summary>
            Include metadata depending if they have a value or not
            </summary>
            <value>If true, only metadata without value are included. If false only metadata with value. If null, all metadata.</value>
        </member>
        <member name="T:ImageVault.Common.Data.Thumbnail">
            <summary>
            Summary description for Thumbnail.
            </summary>
            <remarks>
            2012-06-03 dan: Created
            </remarks>
        </member>
        <member name="M:ImageVault.Common.Data.Thumbnail.#ctor">
            <summary>
            Initializes a new instance of the <b>Thumbnail</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.Thumbnail.#ctor(ImageVault.Common.Data.Thumbnail)">
            <summary>
            Initializes a new instance of the <b>Thumbnail</b> class.
            </summary>
            <param name="thumbnail"></param>
        </member>
        <member name="T:ImageVault.Common.Data.PopulateFields">
            <summary>
            Defines which fields that should be populated
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.PopulateFields.None">
            <summary>
            None, don't populate any extra fields
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.PopulateFields.CanBeDownloaded">
            <summary>
            Populates the <see cref="P:ImageVault.Common.Data.MediaItem.CanBeDownloaded"/> field
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.PopulateFields.Categories">
            <summary>
            Populates the <see cref="P:ImageVault.Common.Data.MediaItem.Categories"/> field
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.PopulateFields.StorageInformation">
            <summary>
            Populates the <see cref="P:ImageVault.Common.Data.Media.Html"/> field of the <see cref="P:ImageVault.Common.Data.MediaItem.MediaConversions"/>
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.PopulateFields.Access">
            <summary>
            Populates the <see cref="P:ImageVault.Common.Data.MediaItem.Access"/> field
            </summary>
        </member>
        <member name="T:ImageVault.Common.Data.MetadataBoolean">
            <summary>
            Summary description for MetadataBoolean.
            </summary>
            <remarks>
            2011-04-14 dan: Created
            </remarks>
            <example></example>
        </member>
        <member name="M:ImageVault.Common.Data.MetadataBoolean.#ctor(ImageVault.Common.Data.MetadataDefinition,System.Nullable{System.Int32},System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <b>MetadataBoolean</b> class.
            </summary>
            <param name="definition"></param>
            <param name="languageId"></param>
            <param name="isMandantory"></param>
            <param name="isTitle"></param>
            <param name="isAltText"></param>
            <param name="isDefinedInVault"></param>
        </member>
        <member name="M:ImageVault.Common.Data.MetadataBoolean.#ctor">
            <summary>
            Initializes a new instance of the <b>MetadataBoolean</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.MetadataBoolean.#ctor(ImageVault.Common.Data.MetadataBoolean)">
            <summary>
            Initializes a new instance of the <b>MetadataBoolean</b> class.
            </summary>
            <param name="metadataBoolean"></param>
        </member>
        <member name="M:ImageVault.Common.Data.MetadataBoolean.Parse(System.String)">
            <summary>
            Parses the supplied value and assigns it to the metadata
            </summary>
            <param name="value"></param>
            <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">If the value was is a valid boolean.</exception>
        </member>
        <member name="P:ImageVault.Common.Data.MetadataBoolean.InnerValue">
            <summary>
            Get/Sets the InnerValue of the Metadata
            </summary>
            <value>The value for all metadata objects. If <see cref="P:ImageVault.Common.Data.Metadata.IsCoherent"/> is false this only contains the value of the first item</value>
        </member>
        <member name="P:ImageVault.Common.Data.MetadataBoolean.BooleanValue">
            <summary>
            Get/Sets the BooleanValue of the MetadataBoolean
            </summary>
            <value></value>
        </member>
        <member name="T:ImageVault.Common.Data.Query.MediaItemPopulationQuery">
            <summary>
            Defines the population status for the FindMediaItem query
            </summary>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="M:ImageVault.Common.Data.Query.MediaItemPopulationQuery.#ctor">
            <summary>
            Initializes a new instance of the <b>MediaItemPopulationQuery</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.Query.MediaItemPopulationQuery.#ctor(ImageVault.Common.Data.Query.MediaItemPopulationQuery)">
            <summary>
            Initializes a new instance of the <b>MediaItemPopulationQuery</b> class.
            </summary>
            <param name="i"></param>
        </member>
        <member name="M:ImageVault.Common.Data.Query.MediaItemPopulationQuery.System#ICloneable#Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:ImageVault.Common.Data.Query.MediaItemPopulationQuery.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="P:ImageVault.Common.Data.Query.MediaItemPopulationQuery.MediaFormats">
            <summary>
            Get/Sets the MediaFormats of the MediaItemPopulationQuery
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.Query.MediaItemPopulationQuery.Metadata">
            <summary>
            Get/Sets the Metadata of the MediaItemPopulationQuery
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.Query.MediaItemPopulationQuery.Categories">
            <summary>
            Get/Sets the Categories of the MediaItemPopulationQuery
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.Query.MediaItemPopulationQuery.CanBeDownloaded">
            <summary>
            Get/Sets the CanBeDownloaded of the MediaItemPopulationQuery
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.Query.MediaItemPopulationQuery.Language">
            <summary>
            Get/Sets the Language of the MediaItemPopulationQuery
            </summary>
            <value>The name of the language in the format "&lt;languagecode2&gt;-&lt;country/regioncode2&gt;".</value>
        </member>
        <member name="P:ImageVault.Common.Data.Query.MediaItemPopulationQuery.StorageInformation">
            <summary>
            Get/Sets the DisplayInformation of the MediaItemPopulationQuery
            </summary>
            <value>True if the Player data for the conversions should be populated</value>
        </member>
        <member name="P:ImageVault.Common.Data.Query.MediaItemPopulationQuery.PublishIdentifier">
            <summary>
            Get/Sets the PublishIdentifier of the MediaItemPopulationQuery
            </summary>
            <value>If this is set, all url:s that are created refers to published media</value>
        </member>
        <member name="P:ImageVault.Common.Data.Query.MediaItemPopulationQuery.PublishInformation">
            <summary>
            Get/Sets the PublishInformation of the MediaItemPopulationQuery
            </summary>
            <value>If publish information should be populated or not</value>
        </member>
        <member name="P:ImageVault.Common.Data.Query.MediaItemPopulationQuery.Access">
            <summary>
            Get/Sets the Access of the MediaItemPopulationQuery
            </summary>
            <value>True if the Access property of the <see cref="T:ImageVault.Common.Data.MediaItem"/> should be populated</value>
        </member>
        <member name="T:ImageVault.Common.Data.MediaFormatOutputTypes">
            <summary>
            Summary description for MediaFormatOutputTypes.
            </summary>
            <remarks>
            2011-02-16 dan: Created
            </remarks>
        </member>
        <member name="F:ImageVault.Common.Data.MediaFormatOutputTypes.Unknown">
            <summary>
            Defines an unknown format
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MediaFormatOutputTypes.WebSafe">
            <summary>
            Image is converted to a WebSafe format
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MediaFormatOutputTypes.Jpeg">
            <summary>
            Image is converted to Jpeg format
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MediaFormatOutputTypes.Tiff">
            <summary>
            Image is converted to Tiff format
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MediaFormatOutputTypes.Png">
            <summary>
            Image is converted to Png format
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MediaFormatOutputTypes.Gif">
            <summary>
            Image is converted to Gif format
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MediaFormatOutputTypes.Original">
            <summary>
            Image is not converted to another format, old format is retained.
            </summary>
        </member>
        <member name="T:ImageVault.Common.Data.Display.AttributeBindName">
            <summary>
            Enum used to bind values to an attribute with an unknown name
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.Display.AttributeBindName.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.Display.AttributeBindName.Title">
            <summary>
            Title
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.Display.AttributeBindName.AlternateText">
            <summary>
            AlternateText
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.Display.AttributeBindName.Url">
            <summary>
            Url
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.Display.AttributeBindName.Width">
            <summary>
            Width
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.Display.AttributeBindName.Height">
            <summary>
            Height
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.Display.AttributeBindName.Name">
            <summary>
            Name of the item
            </summary>
        </member>
        <member name="T:ImageVault.Common.Services.IIdentityService">
            <summary>
            Summary description for IIdentityService.
            </summary>
            <remarks>
            2012-02-20 dan: Created 
            </remarks>
        </member>
        <member name="M:ImageVault.Common.Services.IIdentityService.Find(ImageVault.Common.Data.Query.IdentityQuery)">
            <summary>
            Finds one or more Identities objects based on the supplied query
            </summary>
            <param name="query">The <see cref="T:ImageVault.Common.Data.Query.IdentityQuery"/> describing what data to find</param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Services.IIdentityService.Store(ImageVault.Common.Data.Identity)">
            <summary>
            Stores the supplied identity object to the database
            </summary>
            <param name="identity">The <see cref="T:ImageVault.Common.Data.Identity"/> to store</param>
            <returns></returns>
            <remarks>This will only store the Roles property of the identity. All other properties are read only</remarks>
        </member>
        <member name="M:ImageVault.Common.Services.IIdentityService.IsUserInRole(ImageVault.Common.Data.GlobalRoles)">
            <summary>
            Checks if the user matches the supplied role(s). If multiple roles are supplied, every role must be assigned to the current user
            </summary>
            <param name="roles">The <see cref="T:ImageVault.Common.Data.GlobalRoles"/> the user must be member of</param>
            <returns>True if user in is role, otherwise false.</returns>
        </member>
        <member name="M:ImageVault.Common.Services.IIdentityService.GetRolesForCurrentUser">
            <summary>
            Gets all global roles for the current user as a bit coded value.
            Use bitwise and to check if the user has a role.
            if (GetRolesForCurrentUser() &amp; GlobalRoles.Administrator) { ... }
            </summary>
            <returns>The <see cref="T:ImageVault.Common.Data.GlobalRoles"/> containing all roles that the current user belongs to</returns>
        </member>
        <member name="T:ImageVault.Common.Services.IMediaService">
            <summary>
            Summary description for IMediaService.
            </summary>
            <remarks>
            2011-08-10 dan: Created 
            </remarks>
        </member>
        <member name="M:ImageVault.Common.Services.IMediaService.Find(ImageVault.Common.Data.Query.MediaItemQuery)">
            <summary>
            Finds one or more media items based on the supplied query
            </summary>
            <param name="query">The <see cref="T:ImageVault.Common.Data.Query.MediaItemQuery"/> containing filter and population data</param>
            <returns>The <see cref="T:System.Collections.Generic.List`1"/> that matches the query</returns>
        </member>
        <member name="M:ImageVault.Common.Services.IMediaService.Save(System.Collections.Generic.IList{ImageVault.Common.Data.MediaItem},ImageVault.Common.Data.MediaServiceSaveOptions)">
            <summary>
            Saves the changes to the mediaitem data
            </summary>
            <param name="mediaItems">The <see cref="T:System.Collections.Generic.IList`1"/> to save</param>
            <param name="saveOptions">The <see cref="T:ImageVault.Common.Data.MediaServiceSaveOptions"/> telling what data to save</param>
        </member>
        <member name="M:ImageVault.Common.Services.IMediaService.DeleteMediaItem(System.Int32)">
            <summary>
            Deletes a media item with all its metadata, content, conversions and copies
            </summary>
            <param name="mediaItemId">The id of the media item to delete</param>
        </member>
        <member name="M:ImageVault.Common.Services.IMediaService.PreparePopulateQuery(ImageVault.Common.Data.Query.MediaItemPopulationQuery)">
            <summary>
            Prepares the populate query and creates an id based query
            </summary>
            <param name="q">The <see cref="T:ImageVault.Common.Data.Query.MediaItemPopulationQuery"/> to populate</param>
            <returns>The <see cref="T:ImageVault.Common.Data.Query.MediaItemPopulationQuery"/> that is populated with id:n</returns>
        </member>
        <member name="T:ImageVault.Common.Services.IMediaFormatService">
            <summary>
            Summary description for IMediaFormatService.
            </summary>
            <remarks>
            2012-03-22 dan: Created 
            </remarks>
        </member>
        <member name="M:ImageVault.Common.Services.IMediaFormatService.Find(ImageVault.Common.Data.Query.MediaFormatQuery)">
            <summary>
            Finds mediaformats based on the supplied query
            </summary>
            <param name="q"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Services.IMediaFormatService.Store(ImageVault.Common.Data.MediaFormatBase)">
            <summary>
            Stores the supplied format
            </summary>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Services.IMediaFormatService.Delete(System.Int32)">
            <summary>
            Deletes a conversion format by it's id
            </summary>
            <param name="formatId">The id of the conversion format to delete</param>
        </member>
        <member name="P:ImageVault.Common.Services.IMediaFormatService.OriginalFormat">
            <summary>
            Gets the OriginalFormat of the MediaFormatService
            </summary>
            <value></value>
        </member>
        <member name="T:ImageVault.Common.Data.Query.IdentityQuery">
            <summary>
            The query class for finding identities
            </summary>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="T:ImageVault.Common.Data.StorageInfo">
            <summary>
            
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.StorageInfo.#ctor">
            <summary>
            Initializes a new instance of the <b>StorageInfo</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.StorageInfo.#ctor(ImageVault.Common.Data.StorageInfo)">
            <summary>
            Initializes a new instance of the <b>StorageInfo</b> class.
            </summary>
            <param name="si"></param>
        </member>
        <member name="P:ImageVault.Common.Data.StorageInfo.Name">
            <summary>
            Storage Name
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.StorageInfo.CanDeleteContent">
            <summary>
            If files can be deleted from storage
            </summary>
            <value></value>
        </member>
        <member name="T:ImageVault.Common.Data.Query.MetadataDefinitionQuery">
            <summary>
            Summary description for MetadataDefinitionQuery.
            </summary>
            <remarks>
            2011-10-18 oskar: Created
            </remarks>
        </member>
        <member name="P:ImageVault.Common.Data.Query.MetadataDefinitionQuery.Populate">
            <summary>
            Get/Sets the Populate of the MetadataDefinitionQuery
            </summary>
            <value>The information about what to populate when collecting metadatadefinitions</value>
        </member>
        <member name="T:ImageVault.Common.Data.ListExtensions">
            <summary>
            Summary description for ListExtensions.
            </summary>
            <remarks>
            2011-08-09 dan: Created
            </remarks>
        </member>
        <member name="M:ImageVault.Common.Data.ListExtensions.FindCategory(System.Collections.Generic.IList{ImageVault.Common.Data.Category},System.Int32)">
            <summary>
            Finds a category in the list/tree
            </summary>
            <param name="categories"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:ImageVault.Common.Data.Image">
            <summary>
            Summary description for Image.
            </summary>
            <remarks>
            2011-04-26 dan: Created
            </remarks>
            <example></example>
        </member>
        <member name="M:ImageVault.Common.Data.Image.#ctor">
            <summary>
            Initializes a new instance of the <b>Image</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.Image.#ctor(ImageVault.Common.Data.Image)">
            <summary>
            Initializes a new instance of the <b>Image</b> class.
            </summary>
            <param name="image"></param>
        </member>
        <member name="M:ImageVault.Common.Data.Image.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="T:ImageVault.Common.Data.Display.HtmlElement">
            <summary>
            Defines a html elemenet
            </summary>
            <remarks>
            2011-03-16 oskar: Created
            </remarks>
        </member>
        <member name="F:ImageVault.Common.Data.Display.HtmlElement.Attributes">
            <summary>
            the attributes of the element
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.Display.HtmlElement.#ctor">
            <summary>
            Initializes a new instance of the <b>HtmlElement</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.Display.HtmlElement.#ctor(ImageVault.Common.Data.Display.HtmlElement)">
            <summary>
            Initializes a new instance of the <b>HtmlElement</b> class.
            </summary>
            <param name="htmlElement"></param>
        </member>
        <member name="M:ImageVault.Common.Data.Display.HtmlElement.IsValidName(System.String)">
            <summary>
            Check so that the name dont have any special caracters
            </summary>
            <param name="name"></param>
            <returns>True if valid is name, otherwise false.</returns>
        </member>
        <member name="M:ImageVault.Common.Data.Display.HtmlElement.ToString">
            <summary>
            Makes a html string out of the element
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:ImageVault.Common.Data.Display.HtmlElement"/>.</returns>
        </member>
        <member name="M:ImageVault.Common.Data.Display.HtmlElement.BindAttribute(System.String,ImageVault.Common.Data.Display.AttributeBindName)">
            <summary>
            Binds a value to a attribute
            </summary>
            <param name="value"></param>
            <param name="bindValue"></param>
        </member>
        <member name="M:ImageVault.Common.Data.Display.HtmlElement.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="P:ImageVault.Common.Data.Display.HtmlElement.TagName">
            <summary>
            The tag name of the element
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.Display.HtmlElement.SelfClosing">
            <summary>
            If the element should be self closing.
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.Display.HtmlElement.ChildNodes">
            <summary>
            Gets the ChildNodes of the HtmlElement
            </summary>
            <value></value>
        </member>
        <member name="T:ImageVault.Common.Services.IMediaStreamService">
            <summary>
            Defines the operations needed for streamed requests. Will deliver all types of content to the client.
            </summary>
            <remarks>
            2011-07-18 dan: Created 
            </remarks>
        </member>
        <member name="M:ImageVault.Common.Services.IMediaStreamService.GetMediaStreamById(System.String,System.String)">
            <summary>
            Gets the internal MediaContent from the specified reference
            </summary>
            <param name="mediaContentReferenceId">The mediaContentReferenceId</param>
            <param name="name">The name of the requested item. This can be omitted (null)</param>
            <returns>The <see cref="T:System.IO.Stream"/> containing the contents of the requested media</returns>
            <remarks>This method is also responsible for setting the http headers for the response.</remarks>
        </member>
        <member name="M:ImageVault.Common.Services.IMediaStreamService.GetPublishedMediaStreamById(System.String,System.String)">
            <summary>
            Gets the published MediaContent from the specified reference
            </summary>
            <param name="mediaContentReferenceId">The published mediaContentReferenceId</param>
            <param name="name">The name of the requested item. This can be omitted (null)</param>
            <returns>The <see cref="T:System.IO.Stream"/> containing the contents of the requested media</returns>
            <remarks>This method is also responsible for setting the http headers for the response.</remarks>
        </member>
        <member name="M:ImageVault.Common.Services.IMediaStreamService.GetZipArchiveById(System.String,System.String)">
            <summary>
            Gets a ziparchive content
            </summary>
            <param name="key">The key of the zip archive to get</param>
            <param name="name">The name of the archive. This can be omitted (null)</param>
            <returns>The <see cref="T:System.IO.Stream"/> containing the archive contents</returns>
            <remarks>This method is also responsible for setting the http headers for the response.</remarks>
        </member>
        <member name="T:ImageVault.Common.Lib.LambdaEqualityComparer`1">
            <summary>
            An IEqualityComparer that uses a lambda expression for comparing two instances.
            </summary>
            <remarks>
            2011-11-02 dan: Created
            </remarks>
        </member>
        <member name="M:ImageVault.Common.Lib.LambdaEqualityComparer`1.#ctor(System.Func{`0,System.Int32})">
            <summary>
            Initializes a new instance of the <b>LambdaEqualityComparer&lt;T&gt;</b> class.
            </summary>
            <param name="hashMethod">If this function returns the same integer for two instances, then those instances are considered equal.</param>
        </member>
        <member name="M:ImageVault.Common.Lib.LambdaEqualityComparer`1.#ctor(System.Func{`0,`0,System.Boolean},System.Func{`0,System.Int32})">
            <summary>
            Initializes a new instance of the <b>LambdaEqualityComparer&lt;T&gt;</b> class.
            </summary>
            <param name="comparer"></param>
            <param name="hashMethod"></param>
        </member>
        <member name="M:ImageVault.Common.Lib.LambdaEqualityComparer`1.Equals(`0,`0)">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <param name="x">The first object of type <typeparamref name="T"/> to compare.</param>
            <param name="y">The second object of type <typeparamref name="T"/> to compare.</param>
            <returns>
            true if the specified objects are equal; otherwise, false.
            </returns>
        </member>
        <member name="M:ImageVault.Common.Lib.LambdaEqualityComparer`1.GetHashCode(`0)">
            <summary>
            Returns a hash code for the specified object.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> for which a hash code is to be returned.</param>
            <returns>
            A hash code for the specified object.
            </returns>
            <exception cref="T:System.ArgumentNullException">The type of <paramref name="obj"/> is a reference type and <paramref name="obj"/> is null.</exception>
        </member>
        <member name="T:ImageVault.Common.Lib.EnumerableExtensions">
            <summary>
            Extension methods for ease of access
            </summary>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="M:ImageVault.Common.Lib.EnumerableExtensions.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
            <summary>
            Returns distinct elements from a sequence by using a specified hashmethod to compare values.
            </summary>
            <param name="source">The sequence to remove duplicate elements from.</param>
            <param name="hashMethod">If this function returns the same integer for two instances, then those instances are considered equal and the last one is removed.</param>
            <typeparam name="T">The type of the elements of source.</typeparam>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/>  that contains distinct elements from the source sequence.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="source"/> is null
             or if <paramref name="hashMethod"/> is null.</exception>
        </member>
        <member name="T:ImageVault.Common.Data.MetadataLongString">
            <summary>
            Defines a metadatastring that is maximum 8190 characters of length
            </summary>
            <remarks>
            Longer values are truncated
            2011-04-14 dan: Created
            </remarks>
        </member>
        <member name="M:ImageVault.Common.Data.MetadataLongString.#ctor">
            <summary>
            Initializes a new instance of the <b>MetadataLongString</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.MetadataLongString.#ctor(ImageVault.Common.Data.MetadataDefinition,System.Nullable{System.Int32},System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <b>MetadataLongString</b> class.
            </summary>
            <param name="definition"></param>
            <param name="languageId"></param>
            <param name="isMandantory"></param>
            <param name="isTitle"></param>
            <param name="isAltText"></param>
            <param name="isDefinedInVault"></param>
        </member>
        <member name="M:ImageVault.Common.Data.MetadataLongString.#ctor(ImageVault.Common.Data.MetadataLongString)">
            <summary>
            Initializes a new instance of the <b>MetadataLongString</b> class.
            </summary>
            <param name="metadataLongString"></param>
        </member>
        <member name="M:ImageVault.Common.Data.MetadataLongString.Parse(System.String)">
            <summary>
            Parses the supplied value as a MetadataLongString
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:ImageVault.Common.Data.MetadataLongString.LongStringValue">
            <summary>
            Get/Sets the LongStringValue of the MetadataLongString
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.MetadataLongString.InnerValue">
            <summary>
            Get/Sets the InnerValue of the DbMetadataString
            </summary>
            <value></value>
        </member>
        <member name="T:ImageVault.Common.Data.Query.MetadataDefinitionPopulationQuery">
            <summary>
            Summary description for MetadataDefinitionPopulationQuery.
            </summary>
            <remarks>
            2011-10-18 oskar: Created
            </remarks>
        </member>
        <member name="F:ImageVault.Common.Data.Query.MetadataDefinitionPopulationQuery.SourceMetadataDefinitions">
            <summary>
            Sets if the mapped information should be populated
            </summary>
        </member>
        <member name="T:ImageVault.Common.Lib.EnumExtensions">
            <summary>
            Extension methods for enums
            </summary>
            <remarks>
            2011-11-08 dan: Created
            </remarks>
        </member>
        <member name="M:ImageVault.Common.Lib.EnumExtensions.GetName(System.Enum)">
            <summary>
            Gets the description for the supplied enum
            </summary>
            <remarks>If the enum value has a <see cref="T:System.ComponentModel.DataAnnotations.DisplayAttribute"/>, the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Name"/> property is used. Otherwize the <see cref="M:System.Enum.ToString"/> method is used.</remarks>
            <param name="val">The enum value to get the description for</param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.EnumExtensions.GetNames``1(``0)">
            <summary>
            Gets the names of the enum. If the enum is a <see cref="T:System.FlagsAttribute"/> enum, then each flag is parsed
            individually and if set, the Name of the flag is included in the list.
            Gets the name by using the <see cref="M:ImageVault.Common.Lib.EnumExtensions.GetName(System.Enum)"/> method to include names specified by the <see cref="T:System.ComponentModel.DataAnnotations.DisplayAttribute"/>.
            </summary>
            <param name="val">The enum to get the names for</param>
            <typeparam name="TEnum">The type of Enum to get values for</typeparam>
            <returns>A <see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:System.String"/> containing the names of the enum</returns>
            <exception cref="T:System.ArgumentException">If val is not an enum.</exception>
        </member>
        <member name="T:ImageVault.Common.Data.MetadataString">
            <summary>
            Defines a metadata string that is maximum 250 characters of length
            </summary>
            <remarks>
            Longer values are truncated
            2011-04-14 dan: Created
            </remarks>
            <example></example>
        </member>
        <member name="M:ImageVault.Common.Data.MetadataString.#ctor(ImageVault.Common.Data.MetadataDefinition,System.Nullable{System.Int32},System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <b>MetadataString</b> class.
            </summary>
            <param name="definition"></param>
            <param name="languageId"></param>
            <param name="isMandantory"></param>
            <param name="isTitle"></param>
            <param name="isAltText"></param>
            <param name="isDefinedInVault"></param>
        </member>
        <member name="M:ImageVault.Common.Data.MetadataString.#ctor">
            <summary>
            Initializes a new instance of the <b>MetadataString</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.MetadataString.#ctor(ImageVault.Common.Data.MetadataString)">
            <summary>
            Initializes a new instance of the <b>MetadataString</b> class.
            </summary>
            <param name="metadataString"></param>
        </member>
        <member name="M:ImageVault.Common.Data.MetadataString.Parse(System.String)">
            <summary>
            Parses the supplied value and assigns it to the metadata
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:ImageVault.Common.Data.MetadataString.StringValue">
            <summary>
            Get/Sets the StringValue of the MetadataString
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.MetadataString.InnerValue">
            <summary>
            Get/Sets the Value of the DbMetadataString
            </summary>
            <value></value>
        </member>
        <member name="T:ImageVault.Common.Data.ContentDisplayTypes">
            <summary>
            Defines the different displayoptions that a content can be configured with
            </summary>
            <remarks>
            2011-03-07 dan: Created
            </remarks>
        </member>
        <member name="F:ImageVault.Common.Data.ContentDisplayTypes.Default">
            <summary>
            Default, contains only content. Content type defines type of display
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.ContentDisplayTypes.ContainsPlayer">
            <summary>
            Content contains player and don't need any other data
            </summary>
        </member>
        <member name="T:ImageVault.Common.Services.IServiceFactory">
            <summary>
            Defines an interface for requesting service instances
            </summary>
            <remarks>
            2011-03-04 dan: Created
            </remarks>
        </member>
        <member name="M:ImageVault.Common.Services.IServiceFactory.GetService``1">
            <summary>
            Gets a service instance of the specified type
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Services.IServiceFactory.GetService(System.Type)">
            <summary>
            Gets a service instance of the specified type
            </summary>
            <param name="serviceType"></param>
            <returns></returns>
        </member>
        <member name="T:ImageVault.Common.Lib.LambdaComparer`1">
            <summary>
            Summary description for LambdaComparer.
            </summary>
            <remarks>
            2012-02-21 dan: Created
            </remarks>
        </member>
        <member name="M:ImageVault.Common.Lib.LambdaComparer`1.#ctor(System.Func{`0,`0,System.Int32})">
            <summary>
            Initializes a new instance of the <b>LambdaComparer</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Lib.LambdaComparer`1.Compare(`0,`0)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than,
            equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>A 32-bit signed integer that indicates the relative order 
            of the objects being compared. The return value has these meanings: 
            <table>
            		<tr><th>Value</th><th>Meaning</th></tr>
            		<tr><td>Less than zero</td><td>x less than y.</td></tr>
            		<tr><td>Zero</td><td>x is equal to y.</td></tr>
            		<tr><td>Greater than zero</td><td>x is greater than y.</td></tr>
            	</table>
            </returns>
        </member>
        <member name="T:ImageVault.Common.Data.Query.MediaFormatFilter">
            <summary>
            Filter for media conversion query
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.Query.MediaFormatFilter.#ctor">
            <summary>
            Initializes a new instance of the <b>MediaFormatFilter</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.Query.MediaFormatFilter.#ctor(ImageVault.Common.Data.Query.MediaFormatFilter)">
            <summary>
            Initializes a new instance of the <b>MediaFormatFilter</b> class.
            </summary>
            <param name="i"></param>
        </member>
        <member name="M:ImageVault.Common.Data.Query.MediaFormatFilter.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="P:ImageVault.Common.Data.Query.MediaFormatFilter.Format">
            <summary>
            Get/Sets the Format of the MediaFormatFilter
            </summary>
            <value></value>
        </member>
        <member name="T:ImageVault.Common.Data.Query.IdentityTypes">
            <summary>
            Defines the different types of identities
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.Query.IdentityTypes.User">
            <summary>
            Identifies a user identity
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.Query.IdentityTypes.Group">
            <summary>
            Identifies a group identity
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.Query.IdentityTypes.Any">
            <summary>
            Identifies all identity types
            </summary>
        </member>
        <member name="T:ImageVault.Common.Data.OriginalFormat">
            <summary>
            Defines the original format of a media item
            </summary>
            <remarks>
            2012-03-22 dan: Created
            </remarks>
        </member>
        <member name="M:ImageVault.Common.Data.OriginalFormat.#ctor">
            <summary>
            Initializes a new instance of the <b>OriginalFormat</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.OriginalFormat.Equals(ImageVault.Common.Data.OriginalFormat)">
            <summary>
            Determines whether the specified <see cref="T:ImageVault.Common.Data.OriginalFormat"/> is equal to the current 
            <b>OriginalFormat</b>.
            </summary>
            <param name="other">The <see cref="T:ImageVault.Common.Data.OriginalFormat"/> to compare with the current <see cref="T:ImageVault.Common.Data.OriginalFormat"/>.</param>
            <returns>true if the specified <see cref="T:ImageVault.Common.Data.OriginalFormat"/> is equal to the current <b>OriginalFormat</b>;
            otherwise, false.</returns>
        </member>
        <member name="M:ImageVault.Common.Data.OriginalFormat.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:ImageVault.Common.Data.OriginalFormat.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:ImageVault.Common.Data.StorageLicenseAgreement">
            <summary>
            The Storage license agreement for a specific storage
            </summary>
            <remarks>
            2011-05-09 dan: Created
            </remarks>
        </member>
        <member name="M:ImageVault.Common.Data.StorageLicenseAgreement.#ctor">
            <summary>
            Initializes a new instance of the <b>StorageLicenseAgreement</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.StorageLicenseAgreement.#ctor(ImageVault.Common.Data.StorageLicenseAgreement)">
            <summary>
            Initializes a new instance of the <b>StorageLicenseAgreement</b> class.
            </summary>
            <param name="storageLicenseAgreement"></param>
        </member>
        <member name="P:ImageVault.Common.Data.StorageLicenseAgreement.UploadLicenseMessage">
            <summary>
            Get/Sets the UploadLicenseMessage of the StorageLicenseAgreement
            </summary>
            <value>This html will be presented in the upload dialog.</value>
        </member>
        <member name="T:ImageVault.Common.Data.MediaItemStates">
            <summary>
            Defines the different states that a media item can be in
            </summary>
            <remarks>
            2011-05-09 dan: Created
            </remarks>
        </member>
        <member name="F:ImageVault.Common.Data.MediaItemStates.CreatedInCore">
            <summary>
            Media is created but has no content
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MediaItemStates.MetadataAnalyzed">
            <summary>
            Metadata has been analysed and stored
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MediaItemStates.OriginalContentStored">
            <summary>
            The original content of the media item has been stored in the storage
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MediaItemStates.AnalyzedAndStored">
            <summary>
            When metadata has been analyzed and original content has been stored
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MediaItemStates.MetadataOrganized">
            <summary>
            DbMetadata has been manunaly organized and stored
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MediaItemStates.MediaReadyToUse">
            <summary>
            Media item is ready to be used
            </summary>
        </member>
        <member name="T:ImageVault.Common.Data.Display.TextNode">
            <summary>
            A TextNode is a plain text that can be part of a html segment
            </summary>
            <remarks>
            2012-08-21 dan: Created
            </remarks>
        </member>
        <member name="M:ImageVault.Common.Data.Display.TextNode.#ctor">
            <summary>
            Initializes a new instance of the <b>TextNode</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.Display.TextNode.#ctor(ImageVault.Common.Data.Display.AttributeBindName,System.String)">
            <summary>
            Initializes a new instance of the <b>TextNode</b> class.
            </summary>
            <param name="attributeBindName">The <see cref="P:ImageVault.Common.Data.Display.TextNode.AttributeBindName"/> that should be used as content when the <see cref="M:ImageVault.Common.Data.Display.TextNode.BindAttribute(System.String,ImageVault.Common.Data.Display.AttributeBindName)"/> method is called</param>
            <param name="defaultContent">The default content if no matching value is found</param>
        </member>
        <member name="M:ImageVault.Common.Data.Display.TextNode.#ctor(ImageVault.Common.Data.Display.TextNode)">
            <summary>
            Initializes a new instance of the <b>TextNode</b> class.
            </summary>
            <param name="textNode"></param>
        </member>
        <member name="M:ImageVault.Common.Data.Display.TextNode.BindAttribute(System.String,ImageVault.Common.Data.Display.AttributeBindName)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="bindValue"></param>
        </member>
        <member name="M:ImageVault.Common.Data.Display.TextNode.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:ImageVault.Common.Data.Display.TextNode"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:ImageVault.Common.Data.Display.TextNode"/>.</returns>
        </member>
        <member name="M:ImageVault.Common.Data.Display.TextNode.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="P:ImageVault.Common.Data.Display.TextNode.AttributeBindName">
            <summary>
            Get/Sets the AttributeBindName of the TextNode
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.Display.TextNode.Content">
            <summary>
            Get/Sets the Content of the TextNode
            </summary>
            <value></value>
        </member>
        <member name="T:ImageVault.Common.Data.Display.AttributeValue">
            <summary>
            Represents an attribute value
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.Display.AttributeValue.DefaultValue">
            <summary>
            Get/Sets the value of the attribute
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.Display.AttributeValue.BindValue">
            <summary>
            Get/Sets the name the value should bind to
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.Display.AttributeValue.Required">
            <summary>
            Get/Sets if the attribute is requierd
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.Display.AttributeValue.#ctor(ImageVault.Common.Data.Display.AttributeBindName,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <b>AttributeValue</b> class.
            </summary>
            <param name="bindValue">the name the value should bind to</param>
            <param name="defaultValue">the value of the attribute</param>
            <param name="required">if the attribute is requierd</param>
        </member>
        <member name="T:ImageVault.Common.Services.IUploadService">
            <summary>
            Operations for uploading content 
            </summary>
            <remarks>
            2011-09-23 dan: Created 
            </remarks>
        </member>
        <member name="M:ImageVault.Common.Services.IUploadService.UploadFileContent(System.IO.Stream,System.String)">
            <summary>
            Uploads a part of (or whole) the file
            </summary>
            <param name="content">The content to upload</param>
            <param name="uploadFileId">The uploadFileId of a file to append to or null if we are creating a new file</param>
            <returns>The uploadFileId of the file</returns>
            <remarks>Use this to upload a file. Upload the whole file in one call or by parts. The returned uploadFileId is used to upload parts.
            When the whole file is uploaded, call <see cref="M:ImageVault.Common.Services.IMediaContentService.StoreContentInVault(System.String,System.String,System.String,System.Int32)"/> to finalize the upload and register it in ImageVault.</remarks>
        </member>
        <member name="T:ImageVault.Common.Data.VaultServiceSaveOptions">
            <summary>
            Defines the different Vault service save options
            Combine one or more options with |
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.VaultServiceSaveOptions.Vault">
            <summary>
            Saves basic Vault information
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.VaultServiceSaveOptions.MetadataDefinitions">
            <summary>
            Saves MetadataDefinitions for the vault
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.VaultServiceSaveOptions.AccessRights">
            <summary>
            Saves AccessRights for the vault
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.VaultServiceSaveOptions.All">
            <summary>
            Saves All information
            </summary>
        </member>
        <member name="T:ImageVault.Common.Data.VideoFormat">
            <summary>
            Summary description for VideoFormat.
            </summary>
            <remarks>
            2012-06-04 dan: Created
            </remarks>
        </member>
        <member name="M:ImageVault.Common.Data.VideoFormat.#ctor">
            <summary>
            Initializes a new instance of the <b>VideoFormat</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.VideoFormat.#ctor(ImageVault.Common.Data.VideoFormat)">
            <summary>
            Initializes a new instance of the <b>VideoFormat</b> class.
            </summary>
            <param name="videoFormat"></param>
        </member>
        <member name="M:ImageVault.Common.Data.VideoFormat.CopyFrom(ImageVault.Common.Data.VideoFormat)">
            <summary>
            
            </summary>
            <param name="videoFormat"></param>
        </member>
        <member name="M:ImageVault.Common.Data.VideoFormat.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
    </members>
</doc>
